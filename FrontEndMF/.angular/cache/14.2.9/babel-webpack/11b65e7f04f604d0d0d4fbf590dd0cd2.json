{"ast":null,"code":"(function () {\n  var C = typeof window === 'undefined' ? require('./Crypto').Crypto : window.Crypto; // Shortcuts\n\n  var util = C.util,\n      charenc = C.charenc,\n      UTF8 = charenc.UTF8,\n      Binary = charenc.Binary;\n\n  C.PBKDF2 = function (password, salt, keylen, options) {\n    // Convert to byte arrays\n    if (password.constructor == String) password = UTF8.stringToBytes(password);\n    if (salt.constructor == String) salt = UTF8.stringToBytes(salt);\n    /* else, assume byte arrays already */\n    // Defaults\n\n    var hasher = options && options.hasher || C.SHA1,\n        iterations = options && options.iterations || 1; // Pseudo-random function\n\n    function PRF(password, salt) {\n      return C.HMAC(hasher, salt, password, {\n        asBytes: true\n      });\n    } // Generate key\n\n\n    var derivedKeyBytes = [],\n        blockindex = 1;\n\n    while (derivedKeyBytes.length < keylen) {\n      var block = PRF(password, salt.concat(util.wordsToBytes([blockindex])));\n\n      for (var u = block, i = 1; i < iterations; i++) {\n        u = PRF(password, u);\n\n        for (var j = 0; j < block.length; j++) block[j] ^= u[j];\n      }\n\n      derivedKeyBytes = derivedKeyBytes.concat(block);\n      blockindex++;\n    } // Truncate excess bytes\n\n\n    derivedKeyBytes.length = keylen;\n    return options && options.asBytes ? derivedKeyBytes : options && options.asString ? Binary.bytesToString(derivedKeyBytes) : util.bytesToHex(derivedKeyBytes);\n  };\n})();","map":{"version":3,"names":["C","window","require","Crypto","util","charenc","UTF8","Binary","PBKDF2","password","salt","keylen","options","constructor","String","stringToBytes","hasher","SHA1","iterations","PRF","HMAC","asBytes","derivedKeyBytes","blockindex","length","block","concat","wordsToBytes","u","i","j","asString","bytesToString","bytesToHex"],"sources":["D:/MySource/DAW_C4_Gr1_Eq7/FrontEndMF/node_modules/cryptojs/lib/PBKDF2.js"],"sourcesContent":["(function(){\r\n\r\nvar C = (typeof window === 'undefined') ? require('./Crypto').Crypto : window.Crypto;\r\n\r\n// Shortcuts\r\nvar util = C.util,\r\n    charenc = C.charenc,\r\n    UTF8 = charenc.UTF8,\r\n    Binary = charenc.Binary;\r\n\r\nC.PBKDF2 = function (password, salt, keylen, options) {\r\n\r\n\t// Convert to byte arrays\r\n\tif (password.constructor == String) password = UTF8.stringToBytes(password);\r\n\tif (salt.constructor == String) salt = UTF8.stringToBytes(salt);\r\n\t/* else, assume byte arrays already */\r\n\r\n\t// Defaults\r\n\tvar hasher = options && options.hasher || C.SHA1,\r\n\t    iterations = options && options.iterations || 1;\r\n\r\n\t// Pseudo-random function\r\n\tfunction PRF(password, salt) {\r\n\t\treturn C.HMAC(hasher, salt, password, { asBytes: true });\r\n\t}\r\n\r\n\t// Generate key\r\n\tvar derivedKeyBytes = [],\r\n\t    blockindex = 1;\r\n\twhile (derivedKeyBytes.length < keylen) {\r\n\t\tvar block = PRF(password, salt.concat(util.wordsToBytes([blockindex])));\r\n\t\tfor (var u = block, i = 1; i < iterations; i++) {\r\n\t\t\tu = PRF(password, u);\r\n\t\t\tfor (var j = 0; j < block.length; j++) block[j] ^= u[j];\r\n\t\t}\r\n\t\tderivedKeyBytes = derivedKeyBytes.concat(block);\r\n\t\tblockindex++;\r\n\t}\r\n\r\n\t// Truncate excess bytes\r\n\tderivedKeyBytes.length = keylen;\r\n\r\n\treturn options && options.asBytes ? derivedKeyBytes :\r\n\t       options && options.asString ? Binary.bytesToString(derivedKeyBytes) :\r\n\t       util.bytesToHex(derivedKeyBytes);\r\n\r\n};\r\n\r\n})();\r\n"],"mappings":"AAAA,CAAC,YAAU;EAEX,IAAIA,CAAC,GAAI,OAAOC,MAAP,KAAkB,WAAnB,GAAkCC,OAAO,CAAC,UAAD,CAAP,CAAoBC,MAAtD,GAA+DF,MAAM,CAACE,MAA9E,CAFW,CAIX;;EACA,IAAIC,IAAI,GAAGJ,CAAC,CAACI,IAAb;EAAA,IACIC,OAAO,GAAGL,CAAC,CAACK,OADhB;EAAA,IAEIC,IAAI,GAAGD,OAAO,CAACC,IAFnB;EAAA,IAGIC,MAAM,GAAGF,OAAO,CAACE,MAHrB;;EAKAP,CAAC,CAACQ,MAAF,GAAW,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;IAErD;IACA,IAAIH,QAAQ,CAACI,WAAT,IAAwBC,MAA5B,EAAoCL,QAAQ,GAAGH,IAAI,CAACS,aAAL,CAAmBN,QAAnB,CAAX;IACpC,IAAIC,IAAI,CAACG,WAAL,IAAoBC,MAAxB,EAAgCJ,IAAI,GAAGJ,IAAI,CAACS,aAAL,CAAmBL,IAAnB,CAAP;IAChC;IAEA;;IACA,IAAIM,MAAM,GAAGJ,OAAO,IAAIA,OAAO,CAACI,MAAnB,IAA6BhB,CAAC,CAACiB,IAA5C;IAAA,IACIC,UAAU,GAAGN,OAAO,IAAIA,OAAO,CAACM,UAAnB,IAAiC,CADlD,CARqD,CAWrD;;IACA,SAASC,GAAT,CAAaV,QAAb,EAAuBC,IAAvB,EAA6B;MAC5B,OAAOV,CAAC,CAACoB,IAAF,CAAOJ,MAAP,EAAeN,IAAf,EAAqBD,QAArB,EAA+B;QAAEY,OAAO,EAAE;MAAX,CAA/B,CAAP;IACA,CAdoD,CAgBrD;;;IACA,IAAIC,eAAe,GAAG,EAAtB;IAAA,IACIC,UAAU,GAAG,CADjB;;IAEA,OAAOD,eAAe,CAACE,MAAhB,GAAyBb,MAAhC,EAAwC;MACvC,IAAIc,KAAK,GAAGN,GAAG,CAACV,QAAD,EAAWC,IAAI,CAACgB,MAAL,CAAYtB,IAAI,CAACuB,YAAL,CAAkB,CAACJ,UAAD,CAAlB,CAAZ,CAAX,CAAf;;MACA,KAAK,IAAIK,CAAC,GAAGH,KAAR,EAAeI,CAAC,GAAG,CAAxB,EAA2BA,CAAC,GAAGX,UAA/B,EAA2CW,CAAC,EAA5C,EAAgD;QAC/CD,CAAC,GAAGT,GAAG,CAACV,QAAD,EAAWmB,CAAX,CAAP;;QACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACD,MAA1B,EAAkCM,CAAC,EAAnC,EAAuCL,KAAK,CAACK,CAAD,CAAL,IAAYF,CAAC,CAACE,CAAD,CAAb;MACvC;;MACDR,eAAe,GAAGA,eAAe,CAACI,MAAhB,CAAuBD,KAAvB,CAAlB;MACAF,UAAU;IACV,CA3BoD,CA6BrD;;;IACAD,eAAe,CAACE,MAAhB,GAAyBb,MAAzB;IAEA,OAAOC,OAAO,IAAIA,OAAO,CAACS,OAAnB,GAA6BC,eAA7B,GACAV,OAAO,IAAIA,OAAO,CAACmB,QAAnB,GAA8BxB,MAAM,CAACyB,aAAP,CAAqBV,eAArB,CAA9B,GACAlB,IAAI,CAAC6B,UAAL,CAAgBX,eAAhB,CAFP;EAIA,CApCD;AAsCC,CAhDD"},"metadata":{},"sourceType":"script"}