{"ast":null,"code":"(function () {\n  var C = typeof window === 'undefined' ? require('./Crypto').Crypto : window.Crypto; // Shortcuts\n\n  var util = C.util,\n      charenc = C.charenc,\n      UTF8 = charenc.UTF8,\n      Binary = charenc.Binary;\n\n  C.HMAC = function (hasher, message, key, options) {\n    // Convert to byte arrays\n    if (message.constructor == String) message = UTF8.stringToBytes(message);\n    if (key.constructor == String) key = UTF8.stringToBytes(key);\n    /* else, assume byte arrays already */\n    // Allow arbitrary length keys\n\n    if (key.length > hasher._blocksize * 4) key = hasher(key, {\n      asBytes: true\n    }); // XOR keys with pad constants\n\n    var okey = key.slice(0),\n        ikey = key.slice(0);\n\n    for (var i = 0; i < hasher._blocksize * 4; i++) {\n      okey[i] ^= 0x5C;\n      ikey[i] ^= 0x36;\n    }\n\n    var hmacbytes = hasher(okey.concat(hasher(ikey.concat(message), {\n      asBytes: true\n    })), {\n      asBytes: true\n    });\n    return options && options.asBytes ? hmacbytes : options && options.asString ? Binary.bytesToString(hmacbytes) : util.bytesToHex(hmacbytes);\n  };\n})();","map":{"version":3,"names":["C","window","require","Crypto","util","charenc","UTF8","Binary","HMAC","hasher","message","key","options","constructor","String","stringToBytes","length","_blocksize","asBytes","okey","slice","ikey","i","hmacbytes","concat","asString","bytesToString","bytesToHex"],"sources":["D:/MySource/DAW_C4_Gr1_Eq7/FrontEndMF/node_modules/cryptojs/lib/HMAC.js"],"sourcesContent":["(function(){\r\n\r\nvar C = (typeof window === 'undefined') ? require('./Crypto').Crypto : window.Crypto;\r\n\r\n// Shortcuts\r\nvar util = C.util,\r\n    charenc = C.charenc,\r\n    UTF8 = charenc.UTF8,\r\n    Binary = charenc.Binary;\r\n\r\nC.HMAC = function (hasher, message, key, options) {\r\n\r\n\t// Convert to byte arrays\r\n\tif (message.constructor == String) message = UTF8.stringToBytes(message);\r\n\tif (key.constructor == String) key = UTF8.stringToBytes(key);\r\n\t/* else, assume byte arrays already */\r\n\r\n\t// Allow arbitrary length keys\r\n\tif (key.length > hasher._blocksize * 4)\r\n\t\tkey = hasher(key, { asBytes: true });\r\n\r\n\t// XOR keys with pad constants\r\n\tvar okey = key.slice(0),\r\n\t    ikey = key.slice(0);\r\n\tfor (var i = 0; i < hasher._blocksize * 4; i++) {\r\n\t\tokey[i] ^= 0x5C;\r\n\t\tikey[i] ^= 0x36;\r\n\t}\r\n\r\n\tvar hmacbytes = hasher(okey.concat(hasher(ikey.concat(message), { asBytes: true })), { asBytes: true });\r\n\r\n\treturn options && options.asBytes ? hmacbytes :\r\n\t       options && options.asString ? Binary.bytesToString(hmacbytes) :\r\n\t       util.bytesToHex(hmacbytes);\r\n\r\n};\r\n\r\n})();\r\n"],"mappings":"AAAA,CAAC,YAAU;EAEX,IAAIA,CAAC,GAAI,OAAOC,MAAP,KAAkB,WAAnB,GAAkCC,OAAO,CAAC,UAAD,CAAP,CAAoBC,MAAtD,GAA+DF,MAAM,CAACE,MAA9E,CAFW,CAIX;;EACA,IAAIC,IAAI,GAAGJ,CAAC,CAACI,IAAb;EAAA,IACIC,OAAO,GAAGL,CAAC,CAACK,OADhB;EAAA,IAEIC,IAAI,GAAGD,OAAO,CAACC,IAFnB;EAAA,IAGIC,MAAM,GAAGF,OAAO,CAACE,MAHrB;;EAKAP,CAAC,CAACQ,IAAF,GAAS,UAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;IAEjD;IACA,IAAIF,OAAO,CAACG,WAAR,IAAuBC,MAA3B,EAAmCJ,OAAO,GAAGJ,IAAI,CAACS,aAAL,CAAmBL,OAAnB,CAAV;IACnC,IAAIC,GAAG,CAACE,WAAJ,IAAmBC,MAAvB,EAA+BH,GAAG,GAAGL,IAAI,CAACS,aAAL,CAAmBJ,GAAnB,CAAN;IAC/B;IAEA;;IACA,IAAIA,GAAG,CAACK,MAAJ,GAAaP,MAAM,CAACQ,UAAP,GAAoB,CAArC,EACCN,GAAG,GAAGF,MAAM,CAACE,GAAD,EAAM;MAAEO,OAAO,EAAE;IAAX,CAAN,CAAZ,CATgD,CAWjD;;IACA,IAAIC,IAAI,GAAGR,GAAG,CAACS,KAAJ,CAAU,CAAV,CAAX;IAAA,IACIC,IAAI,GAAGV,GAAG,CAACS,KAAJ,CAAU,CAAV,CADX;;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,MAAM,CAACQ,UAAP,GAAoB,CAAxC,EAA2CK,CAAC,EAA5C,EAAgD;MAC/CH,IAAI,CAACG,CAAD,CAAJ,IAAW,IAAX;MACAD,IAAI,CAACC,CAAD,CAAJ,IAAW,IAAX;IACA;;IAED,IAAIC,SAAS,GAAGd,MAAM,CAACU,IAAI,CAACK,MAAL,CAAYf,MAAM,CAACY,IAAI,CAACG,MAAL,CAAYd,OAAZ,CAAD,EAAuB;MAAEQ,OAAO,EAAE;IAAX,CAAvB,CAAlB,CAAD,EAA+D;MAAEA,OAAO,EAAE;IAAX,CAA/D,CAAtB;IAEA,OAAON,OAAO,IAAIA,OAAO,CAACM,OAAnB,GAA6BK,SAA7B,GACAX,OAAO,IAAIA,OAAO,CAACa,QAAnB,GAA8BlB,MAAM,CAACmB,aAAP,CAAqBH,SAArB,CAA9B,GACAnB,IAAI,CAACuB,UAAL,CAAgBJ,SAAhB,CAFP;EAIA,CAzBD;AA2BC,CArCD"},"metadata":{},"sourceType":"script"}