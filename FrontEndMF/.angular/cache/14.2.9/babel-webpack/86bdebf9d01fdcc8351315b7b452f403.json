{"ast":null,"code":"/**\r\n * Definition of Data Encryption Standard (DES) taken from:\r\n * http://www.itl.nist.gov/fipspubs/fip46-2.htm\r\n */\n(function () {\n  var C = typeof window === 'undefined' ? require('./Crypto').Crypto : window.Crypto; // Shortcuts\n\n  var util = C.util,\n      charenc = C.charenc,\n      UTF8 = charenc.UTF8;\n  /***************************************************************************\r\n   * \r\n   * DES Key Schedule.\r\n   * \r\n   * The Key consists of 16 sub-keys of 48 bits each. As each sub-key is\r\n   * applied to an expanded 32-bit value where each 4 bits of input is\r\n   * expanded into 6 bits of output the sub-key can be broken down into 8\r\n   * 32-bit values which allows the key to be used without expansion.\r\n   * \r\n   * To create the 16 sub-keys, 56 bits are selected from the input 64 bit key\r\n   * according to <i>PC1</i>. Each sub-key is generated by left rotating the\r\n   * bits a different amount and then selecting 48 bits according to <i>PC2</i>.\r\n   * \r\n   **************************************************************************/\n\n  var KeySchedule;\n  /**\r\n   * Representation of a DES key schedule.\r\n   * \r\n   * @param {Array\r\n   *            of 8 bytes} key The cipher key\r\n   * \r\n   * @constructor\r\n   */\n\n  KeySchedule = function (key) {\n    /**\r\n     * The schedule of 16 keys\r\n     */\n    this.keys = new Array(16);\n\n    this._initialiseKeys(key);\n  };\n  /**\r\n   * Permuted Choice 1 (PC1) byte offsets into the key. Each of the 56 entries\r\n   * selects one bit of DES's 56 bit key.\r\n   * <p>\r\n   * \r\n   * <pre>\r\n   * The PC1 is defined as:\r\n   * \r\n   * 57,   49,    41,   33,    25,    17,    9,\r\n   *  1,   58,    50,   42,    34,    26,   18,\r\n   * 10,    2,    59,   51,    43,    35,   27,\r\n   * 19,   11,     3,   60,    52,    44,   36,\r\n   * 63,   55,    47,   39,    31,    23,   15,\r\n   *  7,   62,    54,   46,    38,    30,   22,\r\n   * 14,    6,    61,   53,    45,    37,   29,\r\n   * 21,   13,     5,   28,    20,    12,    4\r\n   * </pre>\r\n   * \r\n   * We represent this as an offset into an 8-byte array and a bit mask upon\r\n   * that byte. For example 57=(7*8)+1 so is the first (MSB) of the 7th byte.\r\n   * \r\n   * @constant\r\n   */\n\n\n  KeySchedule.PC1_offsets = [7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 0];\n  /**\r\n   * Permuted Choice 1 (PC1) bit masks. Each of the 56 entries selects one bit\r\n   * of DES's 56 bit key.\r\n   * \r\n   * @constant\r\n   */\n\n  KeySchedule.PC1_masks = [128, 128, 128, 128, 128, 128, 128, 128, 64, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32, 32, 32, 16, 16, 16, 16, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16];\n  /**\r\n   * Permuted Choice 2 (PC2) selects the active 48 bits from the 56 bits of\r\n   * the key.\r\n   * <p>\r\n   * \r\n   * <pre>\r\n   * The PC2 is defined as:\r\n   * \r\n   * 14,   17,   11,   24,    1,    5,\r\n   *  3,   28,   15,    6,   21,   10,\r\n   * 23,   19,   12,    4,   26,    8,\r\n   * 16,    7,   27,   20,   13,    2,\r\n   * 41,   52,   31,   37,   47,   55,\r\n   * 30,   40,   51,   45,   33,   48,\r\n   * 44,   49,   39,   56,   34,   53,\r\n   * 46,   42,   50,   36,   29,   32\r\n   * </pre>\r\n   * \r\n   * We invert the choice to specify what each bit adds to each 6-bit value of\r\n   * the key. For example, bit 1 is the 5th bit selected so this add 2 to the\r\n   * first 6-bit value.\r\n   * \r\n   * @constant\r\n   */\n\n  KeySchedule.PC2_offsets1 = [0, 3, 1, 2, 0, 1, 3, 2, 0, 1, 0, 2, 3, 0, 1, 3, 0, 0, 2, 3, 1, 0, 2, 0, 0, 2, 3, 1];\n  /**\r\n   * PC2 offsets for 2nd block.\r\n   * \r\n   * @constant\r\n   */\n\n  KeySchedule.PC2_offsets2 = [7, 5, 4, 7, 5, 6, 0, 7, 4, 0, 6, 5, 4, 7, 0, 6, 5, 7, 4, 5, 6, 7, 5, 4, 6, 0, 4, 6];\n  /**\r\n   * Permuted Choice 2 (PC2) masks for 1st block.\r\n   * \r\n   * @constant\r\n   */\n\n  KeySchedule.PC2_masks1 = [2, 1, 32, 4, 1, 4, 16, 1, 0, 1, 8, 8, 2, 32, 8, 32, 16, 0, 16, 4, 2, 0, 32, 4, 0, 2, 8, 16];\n  /**\r\n   * PC2 masks for 2nd block.\r\n   * \r\n   * @constant\r\n   */\n\n  KeySchedule.PC2_masks2 = [2, 32, 8, 1, 2, 2, 0, 4, 4, 0, 8, 16, 32, 16, 0, 32, 4, 32, 2, 1, 16, 8, 8, 16, 1, 0, 1, 4];\n  /**\r\n   * Cumulative key shifts.\r\n   * \r\n   * @constant\r\n   */\n\n  KeySchedule.keyShifts = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n  KeySchedule.prototype._initialiseKeys = function (key) {\n    var i; // extract 56 key bits in order determined by PC1\n\n    var bits = new Array(56);\n\n    for (i = 0; i < 56; i++) {\n      bits[i] = (key[KeySchedule.PC1_offsets[i]] & KeySchedule.PC1_masks[i]) != 0;\n    } // split 56 bits into two 28-bit chunks\n\n\n    var bits1 = bits.slice(0, 28);\n    var bits2 = bits.slice(28, 56); // duplicate each half to allow for easy bit shifts\n\n    bits1 = bits1.concat(bits1);\n    bits2 = bits2.concat(bits2); // assemble the 16 keys\n\n    for (i = 0; i < 16; i++) {\n      var k = [0, 0, 0, 0, 0, 0, 0, 0]; // select the bits of the key according to PC2\n\n      var s = KeySchedule.keyShifts[i];\n\n      for (var j = 0; j < 28; j++) {\n        if (bits1[j + s]) {\n          k[KeySchedule.PC2_offsets1[j]] += KeySchedule.PC2_masks1[j];\n        }\n\n        if (bits2[j + s]) {\n          k[KeySchedule.PC2_offsets2[j]] += KeySchedule.PC2_masks2[j];\n        }\n      } // Scale each of the 8 blocks to a 32-bit mask.\n\n\n      k[0] = ((k[0] & 0x1f) << 27) + ((k[0] & 0x20) >> 5);\n\n      for (var j = 1; j <= 6; j++) {\n        k[j] = k[j] << 27 - 4 * j;\n      }\n\n      k[7] = ((k[7] & 0x3e) >> 1) + ((k[7] & 0x1) << 31);\n      this.keys[i] = k;\n    }\n  };\n  /**\r\n   * Retrieve the key for a specified round\r\n   * \r\n   * @param i\r\n   *            the round\r\n   * @returns the key\r\n   */\n\n\n  KeySchedule.prototype.getKey = function (i) {\n    return this.keys[i];\n  };\n  /***************************************************************************\r\n   * \r\n   * DES Engine State\r\n   * \r\n   **************************************************************************/\n\n\n  var State;\n  /**\r\n   * The algorithm's state. DES operates on two sets of 32-bits, with each\r\n   * block of 32-bits treated as a single number.\r\n   * \r\n   * @class\r\n   */\n\n  State = function () {\n    /** The LHS of the Feistel scheme */\n    this.lhs = 0;\n    /** The RHS of the Feistel scheme */\n\n    this.rhs = 0;\n  };\n  /**\r\n   * The masks that select the SBOX input. Each SBOX accepts 6 bits from the\r\n   * input.\r\n   * \r\n   * @constant\r\n   */\n\n\n  State.SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];\n  /**\r\n   * The SBOXes. The 8 SBOXes each map 6 bit masked bit of the input to 4 bits\r\n   * of output. These SBOXes include the post SBOX permutation and benefit\r\n   * from JavaScript's sparse arrays to make specifying the input match\r\n   * simple.\r\n   * \r\n   * @constant\r\n   */\n\n  State.SBOX = new Array(8);\n  var SBOX = State.SBOX;\n  SBOX[0] = new Array();\n  SBOX[0][0] = 0x808200; // 0 (0, 0) = 14\n\n  SBOX[0][268435456] = 0x8000; // 10000000 (0, 1) = 4\n\n  SBOX[0][536870912] = 0x808002; // 20000000 (0, 2) = 13\n\n  SBOX[0][805306368] = 0x2; // 30000000 (0, 3) = 1\n\n  SBOX[0][1073741824] = 0x200; // 40000000 (0, 4) = 2\n\n  SBOX[0][1342177280] = 0x808202; // 50000000 (0, 5) = 15\n\n  SBOX[0][1610612736] = 0x800202; // 60000000 (0, 6) = 11\n\n  SBOX[0][1879048192] = 0x800000; // 70000000 (0, 7) = 8\n\n  SBOX[0][-2147483648] = 0x202; // 80000000 (0, 8) = 3\n\n  SBOX[0][-1879048192] = 0x800200; // 90000000 (0, 9) = 10\n\n  SBOX[0][-1610612736] = 0x8200; // a0000000 (0, 10) = 6\n\n  SBOX[0][-1342177280] = 0x808000; // b0000000 (0, 11) = 12\n\n  SBOX[0][-1073741824] = 0x8002; // c0000000 (0, 12) = 5\n\n  SBOX[0][-805306368] = 0x800002; // d0000000 (0, 13) = 9\n\n  SBOX[0][-536870912] = 0x0; // e0000000 (0, 14) = 0\n\n  SBOX[0][-268435456] = 0x8202; // f0000000 (0, 15) = 7\n\n  SBOX[0][134217728] = 0x0; // 8000000 (1, 0) = 0\n\n  SBOX[0][402653184] = 0x808202; // 18000000 (1, 1) = 15\n\n  SBOX[0][671088640] = 0x8202; // 28000000 (1, 2) = 7\n\n  SBOX[0][939524096] = 0x8000; // 38000000 (1, 3) = 4\n\n  SBOX[0][1207959552] = 0x808200; // 48000000 (1, 4) = 14\n\n  SBOX[0][1476395008] = 0x200; // 58000000 (1, 5) = 2\n\n  SBOX[0][1744830464] = 0x808002; // 68000000 (1, 6) = 13\n\n  SBOX[0][2013265920] = 0x2; // 78000000 (1, 7) = 1\n\n  SBOX[0][-2013265920] = 0x800200; // 88000000 (1, 8) = 10\n\n  SBOX[0][-1744830464] = 0x8200; // 98000000 (1, 9) = 6\n\n  SBOX[0][-1476395008] = 0x808000; // a8000000 (1, 10) = 12\n\n  SBOX[0][-1207959552] = 0x800202; // b8000000 (1, 11) = 11\n\n  SBOX[0][-939524096] = 0x800002; // c8000000 (1, 12) = 9\n\n  SBOX[0][-671088640] = 0x8002; // d8000000 (1, 13) = 5\n\n  SBOX[0][-402653184] = 0x202; // e8000000 (1, 14) = 3\n\n  SBOX[0][-134217728] = 0x800000; // f8000000 (1, 15) = 8\n\n  SBOX[0][1] = 0x8000; // 1 (2, 0) = 4\n\n  SBOX[0][268435457] = 0x2; // 10000001 (2, 1) = 1\n\n  SBOX[0][536870913] = 0x808200; // 20000001 (2, 2) = 14\n\n  SBOX[0][805306369] = 0x800000; // 30000001 (2, 3) = 8\n\n  SBOX[0][1073741825] = 0x808002; // 40000001 (2, 4) = 13\n\n  SBOX[0][1342177281] = 0x8200; // 50000001 (2, 5) = 6\n\n  SBOX[0][1610612737] = 0x200; // 60000001 (2, 6) = 2\n\n  SBOX[0][1879048193] = 0x800202; // 70000001 (2, 7) = 11\n\n  SBOX[0][-2147483647] = 0x808202; // 80000001 (2, 8) = 15\n\n  SBOX[0][-1879048191] = 0x808000; // 90000001 (2, 9) = 12\n\n  SBOX[0][-1610612735] = 0x800002; // a0000001 (2, 10) = 9\n\n  SBOX[0][-1342177279] = 0x8202; // b0000001 (2, 11) = 7\n\n  SBOX[0][-1073741823] = 0x202; // c0000001 (2, 12) = 3\n\n  SBOX[0][-805306367] = 0x800200; // d0000001 (2, 13) = 10\n\n  SBOX[0][-536870911] = 0x8002; // e0000001 (2, 14) = 5\n\n  SBOX[0][-268435455] = 0x0; // f0000001 (2, 15) = 0\n\n  SBOX[0][134217729] = 0x808202; // 8000001 (3, 0) = 15\n\n  SBOX[0][402653185] = 0x808000; // 18000001 (3, 1) = 12\n\n  SBOX[0][671088641] = 0x800000; // 28000001 (3, 2) = 8\n\n  SBOX[0][939524097] = 0x200; // 38000001 (3, 3) = 2\n\n  SBOX[0][1207959553] = 0x8000; // 48000001 (3, 4) = 4\n\n  SBOX[0][1476395009] = 0x800002; // 58000001 (3, 5) = 9\n\n  SBOX[0][1744830465] = 0x2; // 68000001 (3, 6) = 1\n\n  SBOX[0][2013265921] = 0x8202; // 78000001 (3, 7) = 7\n\n  SBOX[0][-2013265919] = 0x8002; // 88000001 (3, 8) = 5\n\n  SBOX[0][-1744830463] = 0x800202; // 98000001 (3, 9) = 11\n\n  SBOX[0][-1476395007] = 0x202; // a8000001 (3, 10) = 3\n\n  SBOX[0][-1207959551] = 0x808200; // b8000001 (3, 11) = 14\n\n  SBOX[0][-939524095] = 0x800200; // c8000001 (3, 12) = 10\n\n  SBOX[0][-671088639] = 0x0; // d8000001 (3, 13) = 0\n\n  SBOX[0][-402653183] = 0x8200; // e8000001 (3, 14) = 6\n\n  SBOX[0][-134217727] = 0x808002; // f8000001 (3, 15) = 13\n\n  SBOX[1] = new Array();\n  SBOX[1][0] = 0x40084010; // 0 (0, 0) = 15\n\n  SBOX[1][16777216] = 0x4000; // 1000000 (0, 1) = 1\n\n  SBOX[1][33554432] = 0x80000; // 2000000 (0, 2) = 8\n\n  SBOX[1][50331648] = 0x40080010; // 3000000 (0, 3) = 14\n\n  SBOX[1][67108864] = 0x40000010; // 4000000 (0, 4) = 6\n\n  SBOX[1][83886080] = 0x40084000; // 5000000 (0, 5) = 11\n\n  SBOX[1][100663296] = 0x40004000; // 6000000 (0, 6) = 3\n\n  SBOX[1][117440512] = 0x10; // 7000000 (0, 7) = 4\n\n  SBOX[1][134217728] = 0x84000; // 8000000 (0, 8) = 9\n\n  SBOX[1][150994944] = 0x40004010; // 9000000 (0, 9) = 7\n\n  SBOX[1][167772160] = 0x40000000; // a000000 (0, 10) = 2\n\n  SBOX[1][184549376] = 0x84010; // b000000 (0, 11) = 13\n\n  SBOX[1][201326592] = 0x80010; // c000000 (0, 12) = 12\n\n  SBOX[1][218103808] = 0x0; // d000000 (0, 13) = 0\n\n  SBOX[1][234881024] = 0x4010; // e000000 (0, 14) = 5\n\n  SBOX[1][251658240] = 0x40080000; // f000000 (0, 15) = 10\n\n  SBOX[1][8388608] = 0x40004000; // 800000 (1, 0) = 3\n\n  SBOX[1][25165824] = 0x84010; // 1800000 (1, 1) = 13\n\n  SBOX[1][41943040] = 0x10; // 2800000 (1, 2) = 4\n\n  SBOX[1][58720256] = 0x40004010; // 3800000 (1, 3) = 7\n\n  SBOX[1][75497472] = 0x40084010; // 4800000 (1, 4) = 15\n\n  SBOX[1][92274688] = 0x40000000; // 5800000 (1, 5) = 2\n\n  SBOX[1][109051904] = 0x80000; // 6800000 (1, 6) = 8\n\n  SBOX[1][125829120] = 0x40080010; // 7800000 (1, 7) = 14\n\n  SBOX[1][142606336] = 0x80010; // 8800000 (1, 8) = 12\n\n  SBOX[1][159383552] = 0x0; // 9800000 (1, 9) = 0\n\n  SBOX[1][176160768] = 0x4000; // a800000 (1, 10) = 1\n\n  SBOX[1][192937984] = 0x40080000; // b800000 (1, 11) = 10\n\n  SBOX[1][209715200] = 0x40000010; // c800000 (1, 12) = 6\n\n  SBOX[1][226492416] = 0x84000; // d800000 (1, 13) = 9\n\n  SBOX[1][243269632] = 0x40084000; // e800000 (1, 14) = 11\n\n  SBOX[1][260046848] = 0x4010; // f800000 (1, 15) = 5\n\n  SBOX[1][268435456] = 0x0; // 10000000 (2, 0) = 0\n\n  SBOX[1][285212672] = 0x40080010; // 11000000 (2, 1) = 14\n\n  SBOX[1][301989888] = 0x40004010; // 12000000 (2, 2) = 7\n\n  SBOX[1][318767104] = 0x40084000; // 13000000 (2, 3) = 11\n\n  SBOX[1][335544320] = 0x40080000; // 14000000 (2, 4) = 10\n\n  SBOX[1][352321536] = 0x10; // 15000000 (2, 5) = 4\n\n  SBOX[1][369098752] = 0x84010; // 16000000 (2, 6) = 13\n\n  SBOX[1][385875968] = 0x4000; // 17000000 (2, 7) = 1\n\n  SBOX[1][402653184] = 0x4010; // 18000000 (2, 8) = 5\n\n  SBOX[1][419430400] = 0x80000; // 19000000 (2, 9) = 8\n\n  SBOX[1][436207616] = 0x80010; // 1a000000 (2, 10) = 12\n\n  SBOX[1][452984832] = 0x40000010; // 1b000000 (2, 11) = 6\n\n  SBOX[1][469762048] = 0x84000; // 1c000000 (2, 12) = 9\n\n  SBOX[1][486539264] = 0x40004000; // 1d000000 (2, 13) = 3\n\n  SBOX[1][503316480] = 0x40000000; // 1e000000 (2, 14) = 2\n\n  SBOX[1][520093696] = 0x40084010; // 1f000000 (2, 15) = 15\n\n  SBOX[1][276824064] = 0x84010; // 10800000 (3, 0) = 13\n\n  SBOX[1][293601280] = 0x80000; // 11800000 (3, 1) = 8\n\n  SBOX[1][310378496] = 0x40080000; // 12800000 (3, 2) = 10\n\n  SBOX[1][327155712] = 0x4000; // 13800000 (3, 3) = 1\n\n  SBOX[1][343932928] = 0x40004000; // 14800000 (3, 4) = 3\n\n  SBOX[1][360710144] = 0x40084010; // 15800000 (3, 5) = 15\n\n  SBOX[1][377487360] = 0x10; // 16800000 (3, 6) = 4\n\n  SBOX[1][394264576] = 0x40000000; // 17800000 (3, 7) = 2\n\n  SBOX[1][411041792] = 0x40084000; // 18800000 (3, 8) = 11\n\n  SBOX[1][427819008] = 0x40000010; // 19800000 (3, 9) = 6\n\n  SBOX[1][444596224] = 0x40004010; // 1a800000 (3, 10) = 7\n\n  SBOX[1][461373440] = 0x80010; // 1b800000 (3, 11) = 12\n\n  SBOX[1][478150656] = 0x0; // 1c800000 (3, 12) = 0\n\n  SBOX[1][494927872] = 0x4010; // 1d800000 (3, 13) = 5\n\n  SBOX[1][511705088] = 0x40080010; // 1e800000 (3, 14) = 14\n\n  SBOX[1][528482304] = 0x84000; // 1f800000 (3, 15) = 9\n\n  SBOX[2] = new Array();\n  SBOX[2][0] = 0x104; // 0 (0, 0) = 10\n\n  SBOX[2][1048576] = 0x0; // 100000 (0, 1) = 0\n\n  SBOX[2][2097152] = 0x4000100; // 200000 (0, 2) = 9\n\n  SBOX[2][3145728] = 0x10104; // 300000 (0, 3) = 14\n\n  SBOX[2][4194304] = 0x10004; // 400000 (0, 4) = 6\n\n  SBOX[2][5242880] = 0x4000004; // 500000 (0, 5) = 3\n\n  SBOX[2][6291456] = 0x4010104; // 600000 (0, 6) = 15\n\n  SBOX[2][7340032] = 0x4010000; // 700000 (0, 7) = 5\n\n  SBOX[2][8388608] = 0x4000000; // 800000 (0, 8) = 1\n\n  SBOX[2][9437184] = 0x4010100; // 900000 (0, 9) = 13\n\n  SBOX[2][10485760] = 0x10100; // a00000 (0, 10) = 12\n\n  SBOX[2][11534336] = 0x4010004; // b00000 (0, 11) = 7\n\n  SBOX[2][12582912] = 0x4000104; // c00000 (0, 12) = 11\n\n  SBOX[2][13631488] = 0x10000; // d00000 (0, 13) = 4\n\n  SBOX[2][14680064] = 0x4; // e00000 (0, 14) = 2\n\n  SBOX[2][15728640] = 0x100; // f00000 (0, 15) = 8\n\n  SBOX[2][524288] = 0x4010100; // 80000 (1, 0) = 13\n\n  SBOX[2][1572864] = 0x4010004; // 180000 (1, 1) = 7\n\n  SBOX[2][2621440] = 0x0; // 280000 (1, 2) = 0\n\n  SBOX[2][3670016] = 0x4000100; // 380000 (1, 3) = 9\n\n  SBOX[2][4718592] = 0x4000004; // 480000 (1, 4) = 3\n\n  SBOX[2][5767168] = 0x10000; // 580000 (1, 5) = 4\n\n  SBOX[2][6815744] = 0x10004; // 680000 (1, 6) = 6\n\n  SBOX[2][7864320] = 0x104; // 780000 (1, 7) = 10\n\n  SBOX[2][8912896] = 0x4; // 880000 (1, 8) = 2\n\n  SBOX[2][9961472] = 0x100; // 980000 (1, 9) = 8\n\n  SBOX[2][11010048] = 0x4010000; // a80000 (1, 10) = 5\n\n  SBOX[2][12058624] = 0x10104; // b80000 (1, 11) = 14\n\n  SBOX[2][13107200] = 0x10100; // c80000 (1, 12) = 12\n\n  SBOX[2][14155776] = 0x4000104; // d80000 (1, 13) = 11\n\n  SBOX[2][15204352] = 0x4010104; // e80000 (1, 14) = 15\n\n  SBOX[2][16252928] = 0x4000000; // f80000 (1, 15) = 1\n\n  SBOX[2][16777216] = 0x4010100; // 1000000 (2, 0) = 13\n\n  SBOX[2][17825792] = 0x10004; // 1100000 (2, 1) = 6\n\n  SBOX[2][18874368] = 0x10000; // 1200000 (2, 2) = 4\n\n  SBOX[2][19922944] = 0x4000100; // 1300000 (2, 3) = 9\n\n  SBOX[2][20971520] = 0x100; // 1400000 (2, 4) = 8\n\n  SBOX[2][22020096] = 0x4010104; // 1500000 (2, 5) = 15\n\n  SBOX[2][23068672] = 0x4000004; // 1600000 (2, 6) = 3\n\n  SBOX[2][24117248] = 0x0; // 1700000 (2, 7) = 0\n\n  SBOX[2][25165824] = 0x4000104; // 1800000 (2, 8) = 11\n\n  SBOX[2][26214400] = 0x4000000; // 1900000 (2, 9) = 1\n\n  SBOX[2][27262976] = 0x4; // 1a00000 (2, 10) = 2\n\n  SBOX[2][28311552] = 0x10100; // 1b00000 (2, 11) = 12\n\n  SBOX[2][29360128] = 0x4010000; // 1c00000 (2, 12) = 5\n\n  SBOX[2][30408704] = 0x104; // 1d00000 (2, 13) = 10\n\n  SBOX[2][31457280] = 0x10104; // 1e00000 (2, 14) = 14\n\n  SBOX[2][32505856] = 0x4010004; // 1f00000 (2, 15) = 7\n\n  SBOX[2][17301504] = 0x4000000; // 1080000 (3, 0) = 1\n\n  SBOX[2][18350080] = 0x104; // 1180000 (3, 1) = 10\n\n  SBOX[2][19398656] = 0x4010100; // 1280000 (3, 2) = 13\n\n  SBOX[2][20447232] = 0x0; // 1380000 (3, 3) = 0\n\n  SBOX[2][21495808] = 0x10004; // 1480000 (3, 4) = 6\n\n  SBOX[2][22544384] = 0x4000100; // 1580000 (3, 5) = 9\n\n  SBOX[2][23592960] = 0x100; // 1680000 (3, 6) = 8\n\n  SBOX[2][24641536] = 0x4010004; // 1780000 (3, 7) = 7\n\n  SBOX[2][25690112] = 0x10000; // 1880000 (3, 8) = 4\n\n  SBOX[2][26738688] = 0x4010104; // 1980000 (3, 9) = 15\n\n  SBOX[2][27787264] = 0x10104; // 1a80000 (3, 10) = 14\n\n  SBOX[2][28835840] = 0x4000004; // 1b80000 (3, 11) = 3\n\n  SBOX[2][29884416] = 0x4000104; // 1c80000 (3, 12) = 11\n\n  SBOX[2][30932992] = 0x4010000; // 1d80000 (3, 13) = 5\n\n  SBOX[2][31981568] = 0x4; // 1e80000 (3, 14) = 2\n\n  SBOX[2][33030144] = 0x10100; // 1f80000 (3, 15) = 12\n\n  SBOX[3] = new Array();\n  SBOX[3][0] = 0x80401000; // 0 (0, 0) = 7\n\n  SBOX[3][65536] = 0x80001040; // 10000 (0, 1) = 13\n\n  SBOX[3][131072] = 0x401040; // 20000 (0, 2) = 14\n\n  SBOX[3][196608] = 0x80400000; // 30000 (0, 3) = 3\n\n  SBOX[3][262144] = 0x0; // 40000 (0, 4) = 0\n\n  SBOX[3][327680] = 0x401000; // 50000 (0, 5) = 6\n\n  SBOX[3][393216] = 0x80000040; // 60000 (0, 6) = 9\n\n  SBOX[3][458752] = 0x400040; // 70000 (0, 7) = 10\n\n  SBOX[3][524288] = 0x80000000; // 80000 (0, 8) = 1\n\n  SBOX[3][589824] = 0x400000; // 90000 (0, 9) = 2\n\n  SBOX[3][655360] = 0x40; // a0000 (0, 10) = 8\n\n  SBOX[3][720896] = 0x80001000; // b0000 (0, 11) = 5\n\n  SBOX[3][786432] = 0x80400040; // c0000 (0, 12) = 11\n\n  SBOX[3][851968] = 0x1040; // d0000 (0, 13) = 12\n\n  SBOX[3][917504] = 0x1000; // e0000 (0, 14) = 4\n\n  SBOX[3][983040] = 0x80401040; // f0000 (0, 15) = 15\n\n  SBOX[3][32768] = 0x80001040; // 8000 (1, 0) = 13\n\n  SBOX[3][98304] = 0x40; // 18000 (1, 1) = 8\n\n  SBOX[3][163840] = 0x80400040; // 28000 (1, 2) = 11\n\n  SBOX[3][229376] = 0x80001000; // 38000 (1, 3) = 5\n\n  SBOX[3][294912] = 0x401000; // 48000 (1, 4) = 6\n\n  SBOX[3][360448] = 0x80401040; // 58000 (1, 5) = 15\n\n  SBOX[3][425984] = 0x0; // 68000 (1, 6) = 0\n\n  SBOX[3][491520] = 0x80400000; // 78000 (1, 7) = 3\n\n  SBOX[3][557056] = 0x1000; // 88000 (1, 8) = 4\n\n  SBOX[3][622592] = 0x80401000; // 98000 (1, 9) = 7\n\n  SBOX[3][688128] = 0x400000; // a8000 (1, 10) = 2\n\n  SBOX[3][753664] = 0x1040; // b8000 (1, 11) = 12\n\n  SBOX[3][819200] = 0x80000000; // c8000 (1, 12) = 1\n\n  SBOX[3][884736] = 0x400040; // d8000 (1, 13) = 10\n\n  SBOX[3][950272] = 0x401040; // e8000 (1, 14) = 14\n\n  SBOX[3][1015808] = 0x80000040; // f8000 (1, 15) = 9\n\n  SBOX[3][1048576] = 0x400040; // 100000 (2, 0) = 10\n\n  SBOX[3][1114112] = 0x401000; // 110000 (2, 1) = 6\n\n  SBOX[3][1179648] = 0x80000040; // 120000 (2, 2) = 9\n\n  SBOX[3][1245184] = 0x0; // 130000 (2, 3) = 0\n\n  SBOX[3][1310720] = 0x1040; // 140000 (2, 4) = 12\n\n  SBOX[3][1376256] = 0x80400040; // 150000 (2, 5) = 11\n\n  SBOX[3][1441792] = 0x80401000; // 160000 (2, 6) = 7\n\n  SBOX[3][1507328] = 0x80001040; // 170000 (2, 7) = 13\n\n  SBOX[3][1572864] = 0x80401040; // 180000 (2, 8) = 15\n\n  SBOX[3][1638400] = 0x80000000; // 190000 (2, 9) = 1\n\n  SBOX[3][1703936] = 0x80400000; // 1a0000 (2, 10) = 3\n\n  SBOX[3][1769472] = 0x401040; // 1b0000 (2, 11) = 14\n\n  SBOX[3][1835008] = 0x80001000; // 1c0000 (2, 12) = 5\n\n  SBOX[3][1900544] = 0x400000; // 1d0000 (2, 13) = 2\n\n  SBOX[3][1966080] = 0x40; // 1e0000 (2, 14) = 8\n\n  SBOX[3][2031616] = 0x1000; // 1f0000 (2, 15) = 4\n\n  SBOX[3][1081344] = 0x80400000; // 108000 (3, 0) = 3\n\n  SBOX[3][1146880] = 0x80401040; // 118000 (3, 1) = 15\n\n  SBOX[3][1212416] = 0x0; // 128000 (3, 2) = 0\n\n  SBOX[3][1277952] = 0x401000; // 138000 (3, 3) = 6\n\n  SBOX[3][1343488] = 0x400040; // 148000 (3, 4) = 10\n\n  SBOX[3][1409024] = 0x80000000; // 158000 (3, 5) = 1\n\n  SBOX[3][1474560] = 0x80001040; // 168000 (3, 6) = 13\n\n  SBOX[3][1540096] = 0x40; // 178000 (3, 7) = 8\n\n  SBOX[3][1605632] = 0x80000040; // 188000 (3, 8) = 9\n\n  SBOX[3][1671168] = 0x1000; // 198000 (3, 9) = 4\n\n  SBOX[3][1736704] = 0x80001000; // 1a8000 (3, 10) = 5\n\n  SBOX[3][1802240] = 0x80400040; // 1b8000 (3, 11) = 11\n\n  SBOX[3][1867776] = 0x1040; // 1c8000 (3, 12) = 12\n\n  SBOX[3][1933312] = 0x80401000; // 1d8000 (3, 13) = 7\n\n  SBOX[3][1998848] = 0x400000; // 1e8000 (3, 14) = 2\n\n  SBOX[3][2064384] = 0x401040; // 1f8000 (3, 15) = 14\n\n  SBOX[4] = new Array();\n  SBOX[4][0] = 0x80; // 0 (0, 0) = 2\n\n  SBOX[4][4096] = 0x1040000; // 1000 (0, 1) = 12\n\n  SBOX[4][8192] = 0x40000; // 2000 (0, 2) = 4\n\n  SBOX[4][12288] = 0x20000000; // 3000 (0, 3) = 1\n\n  SBOX[4][16384] = 0x20040080; // 4000 (0, 4) = 7\n\n  SBOX[4][20480] = 0x1000080; // 5000 (0, 5) = 10\n\n  SBOX[4][24576] = 0x21000080; // 6000 (0, 6) = 11\n\n  SBOX[4][28672] = 0x40080; // 7000 (0, 7) = 6\n\n  SBOX[4][32768] = 0x1000000; // 8000 (0, 8) = 8\n\n  SBOX[4][36864] = 0x20040000; // 9000 (0, 9) = 5\n\n  SBOX[4][40960] = 0x20000080; // a000 (0, 10) = 3\n\n  SBOX[4][45056] = 0x21040080; // b000 (0, 11) = 15\n\n  SBOX[4][49152] = 0x21040000; // c000 (0, 12) = 13\n\n  SBOX[4][53248] = 0x0; // d000 (0, 13) = 0\n\n  SBOX[4][57344] = 0x1040080; // e000 (0, 14) = 14\n\n  SBOX[4][61440] = 0x21000000; // f000 (0, 15) = 9\n\n  SBOX[4][2048] = 0x1040080; // 800 (1, 0) = 14\n\n  SBOX[4][6144] = 0x21000080; // 1800 (1, 1) = 11\n\n  SBOX[4][10240] = 0x80; // 2800 (1, 2) = 2\n\n  SBOX[4][14336] = 0x1040000; // 3800 (1, 3) = 12\n\n  SBOX[4][18432] = 0x40000; // 4800 (1, 4) = 4\n\n  SBOX[4][22528] = 0x20040080; // 5800 (1, 5) = 7\n\n  SBOX[4][26624] = 0x21040000; // 6800 (1, 6) = 13\n\n  SBOX[4][30720] = 0x20000000; // 7800 (1, 7) = 1\n\n  SBOX[4][34816] = 0x20040000; // 8800 (1, 8) = 5\n\n  SBOX[4][38912] = 0x0; // 9800 (1, 9) = 0\n\n  SBOX[4][43008] = 0x21040080; // a800 (1, 10) = 15\n\n  SBOX[4][47104] = 0x1000080; // b800 (1, 11) = 10\n\n  SBOX[4][51200] = 0x20000080; // c800 (1, 12) = 3\n\n  SBOX[4][55296] = 0x21000000; // d800 (1, 13) = 9\n\n  SBOX[4][59392] = 0x1000000; // e800 (1, 14) = 8\n\n  SBOX[4][63488] = 0x40080; // f800 (1, 15) = 6\n\n  SBOX[4][65536] = 0x40000; // 10000 (2, 0) = 4\n\n  SBOX[4][69632] = 0x80; // 11000 (2, 1) = 2\n\n  SBOX[4][73728] = 0x20000000; // 12000 (2, 2) = 1\n\n  SBOX[4][77824] = 0x21000080; // 13000 (2, 3) = 11\n\n  SBOX[4][81920] = 0x1000080; // 14000 (2, 4) = 10\n\n  SBOX[4][86016] = 0x21040000; // 15000 (2, 5) = 13\n\n  SBOX[4][90112] = 0x20040080; // 16000 (2, 6) = 7\n\n  SBOX[4][94208] = 0x1000000; // 17000 (2, 7) = 8\n\n  SBOX[4][98304] = 0x21040080; // 18000 (2, 8) = 15\n\n  SBOX[4][102400] = 0x21000000; // 19000 (2, 9) = 9\n\n  SBOX[4][106496] = 0x1040000; // 1a000 (2, 10) = 12\n\n  SBOX[4][110592] = 0x20040000; // 1b000 (2, 11) = 5\n\n  SBOX[4][114688] = 0x40080; // 1c000 (2, 12) = 6\n\n  SBOX[4][118784] = 0x20000080; // 1d000 (2, 13) = 3\n\n  SBOX[4][122880] = 0x0; // 1e000 (2, 14) = 0\n\n  SBOX[4][126976] = 0x1040080; // 1f000 (2, 15) = 14\n\n  SBOX[4][67584] = 0x21000080; // 10800 (3, 0) = 11\n\n  SBOX[4][71680] = 0x1000000; // 11800 (3, 1) = 8\n\n  SBOX[4][75776] = 0x1040000; // 12800 (3, 2) = 12\n\n  SBOX[4][79872] = 0x20040080; // 13800 (3, 3) = 7\n\n  SBOX[4][83968] = 0x20000000; // 14800 (3, 4) = 1\n\n  SBOX[4][88064] = 0x1040080; // 15800 (3, 5) = 14\n\n  SBOX[4][92160] = 0x80; // 16800 (3, 6) = 2\n\n  SBOX[4][96256] = 0x21040000; // 17800 (3, 7) = 13\n\n  SBOX[4][100352] = 0x40080; // 18800 (3, 8) = 6\n\n  SBOX[4][104448] = 0x21040080; // 19800 (3, 9) = 15\n\n  SBOX[4][108544] = 0x0; // 1a800 (3, 10) = 0\n\n  SBOX[4][112640] = 0x21000000; // 1b800 (3, 11) = 9\n\n  SBOX[4][116736] = 0x1000080; // 1c800 (3, 12) = 10\n\n  SBOX[4][120832] = 0x40000; // 1d800 (3, 13) = 4\n\n  SBOX[4][124928] = 0x20040000; // 1e800 (3, 14) = 5\n\n  SBOX[4][129024] = 0x20000080; // 1f800 (3, 15) = 3\n\n  SBOX[5] = new Array();\n  SBOX[5][0] = 0x10000008; // 0 (0, 0) = 12\n\n  SBOX[5][256] = 0x2000; // 100 (0, 1) = 1\n\n  SBOX[5][512] = 0x10200000; // 200 (0, 2) = 10\n\n  SBOX[5][768] = 0x10202008; // 300 (0, 3) = 15\n\n  SBOX[5][1024] = 0x10002000; // 400 (0, 4) = 9\n\n  SBOX[5][1280] = 0x200000; // 500 (0, 5) = 2\n\n  SBOX[5][1536] = 0x200008; // 600 (0, 6) = 6\n\n  SBOX[5][1792] = 0x10000000; // 700 (0, 7) = 8\n\n  SBOX[5][2048] = 0x0; // 800 (0, 8) = 0\n\n  SBOX[5][2304] = 0x10002008; // 900 (0, 9) = 13\n\n  SBOX[5][2560] = 0x202000; // a00 (0, 10) = 3\n\n  SBOX[5][2816] = 0x8; // b00 (0, 11) = 4\n\n  SBOX[5][3072] = 0x10200008; // c00 (0, 12) = 14\n\n  SBOX[5][3328] = 0x202008; // d00 (0, 13) = 7\n\n  SBOX[5][3584] = 0x2008; // e00 (0, 14) = 5\n\n  SBOX[5][3840] = 0x10202000; // f00 (0, 15) = 11\n\n  SBOX[5][128] = 0x10200000; // 80 (1, 0) = 10\n\n  SBOX[5][384] = 0x10202008; // 180 (1, 1) = 15\n\n  SBOX[5][640] = 0x8; // 280 (1, 2) = 4\n\n  SBOX[5][896] = 0x200000; // 380 (1, 3) = 2\n\n  SBOX[5][1152] = 0x202008; // 480 (1, 4) = 7\n\n  SBOX[5][1408] = 0x10000008; // 580 (1, 5) = 12\n\n  SBOX[5][1664] = 0x10002000; // 680 (1, 6) = 9\n\n  SBOX[5][1920] = 0x2008; // 780 (1, 7) = 5\n\n  SBOX[5][2176] = 0x200008; // 880 (1, 8) = 6\n\n  SBOX[5][2432] = 0x2000; // 980 (1, 9) = 1\n\n  SBOX[5][2688] = 0x10002008; // a80 (1, 10) = 13\n\n  SBOX[5][2944] = 0x10200008; // b80 (1, 11) = 14\n\n  SBOX[5][3200] = 0x0; // c80 (1, 12) = 0\n\n  SBOX[5][3456] = 0x10202000; // d80 (1, 13) = 11\n\n  SBOX[5][3712] = 0x202000; // e80 (1, 14) = 3\n\n  SBOX[5][3968] = 0x10000000; // f80 (1, 15) = 8\n\n  SBOX[5][4096] = 0x10002000; // 1000 (2, 0) = 9\n\n  SBOX[5][4352] = 0x10200008; // 1100 (2, 1) = 14\n\n  SBOX[5][4608] = 0x10202008; // 1200 (2, 2) = 15\n\n  SBOX[5][4864] = 0x2008; // 1300 (2, 3) = 5\n\n  SBOX[5][5120] = 0x200000; // 1400 (2, 4) = 2\n\n  SBOX[5][5376] = 0x10000000; // 1500 (2, 5) = 8\n\n  SBOX[5][5632] = 0x10000008; // 1600 (2, 6) = 12\n\n  SBOX[5][5888] = 0x202000; // 1700 (2, 7) = 3\n\n  SBOX[5][6144] = 0x202008; // 1800 (2, 8) = 7\n\n  SBOX[5][6400] = 0x0; // 1900 (2, 9) = 0\n\n  SBOX[5][6656] = 0x8; // 1a00 (2, 10) = 4\n\n  SBOX[5][6912] = 0x10200000; // 1b00 (2, 11) = 10\n\n  SBOX[5][7168] = 0x2000; // 1c00 (2, 12) = 1\n\n  SBOX[5][7424] = 0x10002008; // 1d00 (2, 13) = 13\n\n  SBOX[5][7680] = 0x10202000; // 1e00 (2, 14) = 11\n\n  SBOX[5][7936] = 0x200008; // 1f00 (2, 15) = 6\n\n  SBOX[5][4224] = 0x8; // 1080 (3, 0) = 4\n\n  SBOX[5][4480] = 0x202000; // 1180 (3, 1) = 3\n\n  SBOX[5][4736] = 0x200000; // 1280 (3, 2) = 2\n\n  SBOX[5][4992] = 0x10000008; // 1380 (3, 3) = 12\n\n  SBOX[5][5248] = 0x10002000; // 1480 (3, 4) = 9\n\n  SBOX[5][5504] = 0x2008; // 1580 (3, 5) = 5\n\n  SBOX[5][5760] = 0x10202008; // 1680 (3, 6) = 15\n\n  SBOX[5][6016] = 0x10200000; // 1780 (3, 7) = 10\n\n  SBOX[5][6272] = 0x10202000; // 1880 (3, 8) = 11\n\n  SBOX[5][6528] = 0x10200008; // 1980 (3, 9) = 14\n\n  SBOX[5][6784] = 0x2000; // 1a80 (3, 10) = 1\n\n  SBOX[5][7040] = 0x202008; // 1b80 (3, 11) = 7\n\n  SBOX[5][7296] = 0x200008; // 1c80 (3, 12) = 6\n\n  SBOX[5][7552] = 0x0; // 1d80 (3, 13) = 0\n\n  SBOX[5][7808] = 0x10000000; // 1e80 (3, 14) = 8\n\n  SBOX[5][8064] = 0x10002008; // 1f80 (3, 15) = 13\n\n  SBOX[6] = new Array();\n  SBOX[6][0] = 0x100000; // 0 (0, 0) = 4\n\n  SBOX[6][16] = 0x2000401; // 10 (0, 1) = 11\n\n  SBOX[6][32] = 0x400; // 20 (0, 2) = 2\n\n  SBOX[6][48] = 0x100401; // 30 (0, 3) = 14\n\n  SBOX[6][64] = 0x2100401; // 40 (0, 4) = 15\n\n  SBOX[6][80] = 0x0; // 50 (0, 5) = 0\n\n  SBOX[6][96] = 0x1; // 60 (0, 6) = 8\n\n  SBOX[6][112] = 0x2100001; // 70 (0, 7) = 13\n\n  SBOX[6][128] = 0x2000400; // 80 (0, 8) = 3\n\n  SBOX[6][144] = 0x100001; // 90 (0, 9) = 12\n\n  SBOX[6][160] = 0x2000001; // a0 (0, 10) = 9\n\n  SBOX[6][176] = 0x2100400; // b0 (0, 11) = 7\n\n  SBOX[6][192] = 0x2100000; // c0 (0, 12) = 5\n\n  SBOX[6][208] = 0x401; // d0 (0, 13) = 10\n\n  SBOX[6][224] = 0x100400; // e0 (0, 14) = 6\n\n  SBOX[6][240] = 0x2000000; // f0 (0, 15) = 1\n\n  SBOX[6][8] = 0x2100001; // 8 (1, 0) = 13\n\n  SBOX[6][24] = 0x0; // 18 (1, 1) = 0\n\n  SBOX[6][40] = 0x2000401; // 28 (1, 2) = 11\n\n  SBOX[6][56] = 0x2100400; // 38 (1, 3) = 7\n\n  SBOX[6][72] = 0x100000; // 48 (1, 4) = 4\n\n  SBOX[6][88] = 0x2000001; // 58 (1, 5) = 9\n\n  SBOX[6][104] = 0x2000000; // 68 (1, 6) = 1\n\n  SBOX[6][120] = 0x401; // 78 (1, 7) = 10\n\n  SBOX[6][136] = 0x100401; // 88 (1, 8) = 14\n\n  SBOX[6][152] = 0x2000400; // 98 (1, 9) = 3\n\n  SBOX[6][168] = 0x2100000; // a8 (1, 10) = 5\n\n  SBOX[6][184] = 0x100001; // b8 (1, 11) = 12\n\n  SBOX[6][200] = 0x400; // c8 (1, 12) = 2\n\n  SBOX[6][216] = 0x2100401; // d8 (1, 13) = 15\n\n  SBOX[6][232] = 0x1; // e8 (1, 14) = 8\n\n  SBOX[6][248] = 0x100400; // f8 (1, 15) = 6\n\n  SBOX[6][256] = 0x2000000; // 100 (2, 0) = 1\n\n  SBOX[6][272] = 0x100000; // 110 (2, 1) = 4\n\n  SBOX[6][288] = 0x2000401; // 120 (2, 2) = 11\n\n  SBOX[6][304] = 0x2100001; // 130 (2, 3) = 13\n\n  SBOX[6][320] = 0x100001; // 140 (2, 4) = 12\n\n  SBOX[6][336] = 0x2000400; // 150 (2, 5) = 3\n\n  SBOX[6][352] = 0x2100400; // 160 (2, 6) = 7\n\n  SBOX[6][368] = 0x100401; // 170 (2, 7) = 14\n\n  SBOX[6][384] = 0x401; // 180 (2, 8) = 10\n\n  SBOX[6][400] = 0x2100401; // 190 (2, 9) = 15\n\n  SBOX[6][416] = 0x100400; // 1a0 (2, 10) = 6\n\n  SBOX[6][432] = 0x1; // 1b0 (2, 11) = 8\n\n  SBOX[6][448] = 0x0; // 1c0 (2, 12) = 0\n\n  SBOX[6][464] = 0x2100000; // 1d0 (2, 13) = 5\n\n  SBOX[6][480] = 0x2000001; // 1e0 (2, 14) = 9\n\n  SBOX[6][496] = 0x400; // 1f0 (2, 15) = 2\n\n  SBOX[6][264] = 0x100400; // 108 (3, 0) = 6\n\n  SBOX[6][280] = 0x2000401; // 118 (3, 1) = 11\n\n  SBOX[6][296] = 0x2100001; // 128 (3, 2) = 13\n\n  SBOX[6][312] = 0x1; // 138 (3, 3) = 8\n\n  SBOX[6][328] = 0x2000000; // 148 (3, 4) = 1\n\n  SBOX[6][344] = 0x100000; // 158 (3, 5) = 4\n\n  SBOX[6][360] = 0x401; // 168 (3, 6) = 10\n\n  SBOX[6][376] = 0x2100400; // 178 (3, 7) = 7\n\n  SBOX[6][392] = 0x2000001; // 188 (3, 8) = 9\n\n  SBOX[6][408] = 0x2100000; // 198 (3, 9) = 5\n\n  SBOX[6][424] = 0x0; // 1a8 (3, 10) = 0\n\n  SBOX[6][440] = 0x2100401; // 1b8 (3, 11) = 15\n\n  SBOX[6][456] = 0x100401; // 1c8 (3, 12) = 14\n\n  SBOX[6][472] = 0x400; // 1d8 (3, 13) = 2\n\n  SBOX[6][488] = 0x2000400; // 1e8 (3, 14) = 3\n\n  SBOX[6][504] = 0x100001; // 1f8 (3, 15) = 12\n\n  SBOX[7] = new Array();\n  SBOX[7][0] = 0x8000820; // 0 (0, 0) = 13\n\n  SBOX[7][1] = 0x20000; // 1 (0, 1) = 2\n\n  SBOX[7][2] = 0x8000000; // 2 (0, 2) = 8\n\n  SBOX[7][3] = 0x20; // 3 (0, 3) = 4\n\n  SBOX[7][4] = 0x20020; // 4 (0, 4) = 6\n\n  SBOX[7][5] = 0x8020820; // 5 (0, 5) = 15\n\n  SBOX[7][6] = 0x8020800; // 6 (0, 6) = 11\n\n  SBOX[7][7] = 0x800; // 7 (0, 7) = 1\n\n  SBOX[7][8] = 0x8020000; // 8 (0, 8) = 10\n\n  SBOX[7][9] = 0x8000800; // 9 (0, 9) = 9\n\n  SBOX[7][10] = 0x20800; // a (0, 10) = 3\n\n  SBOX[7][11] = 0x8020020; // b (0, 11) = 14\n\n  SBOX[7][12] = 0x820; // c (0, 12) = 5\n\n  SBOX[7][13] = 0x0; // d (0, 13) = 0\n\n  SBOX[7][14] = 0x8000020; // e (0, 14) = 12\n\n  SBOX[7][15] = 0x20820; // f (0, 15) = 7\n\n  SBOX[7][-2147483648] = 0x800; // 80000000 (1, 0) = 1\n\n  SBOX[7][-2147483647] = 0x8020820; // 80000001 (1, 1) = 15\n\n  SBOX[7][-2147483646] = 0x8000820; // 80000002 (1, 2) = 13\n\n  SBOX[7][-2147483645] = 0x8000000; // 80000003 (1, 3) = 8\n\n  SBOX[7][-2147483644] = 0x8020000; // 80000004 (1, 4) = 10\n\n  SBOX[7][-2147483643] = 0x20800; // 80000005 (1, 5) = 3\n\n  SBOX[7][-2147483642] = 0x20820; // 80000006 (1, 6) = 7\n\n  SBOX[7][-2147483641] = 0x20; // 80000007 (1, 7) = 4\n\n  SBOX[7][-2147483640] = 0x8000020; // 80000008 (1, 8) = 12\n\n  SBOX[7][-2147483639] = 0x820; // 80000009 (1, 9) = 5\n\n  SBOX[7][-2147483638] = 0x20020; // 8000000a (1, 10) = 6\n\n  SBOX[7][-2147483637] = 0x8020800; // 8000000b (1, 11) = 11\n\n  SBOX[7][-2147483636] = 0x0; // 8000000c (1, 12) = 0\n\n  SBOX[7][-2147483635] = 0x8020020; // 8000000d (1, 13) = 14\n\n  SBOX[7][-2147483634] = 0x8000800; // 8000000e (1, 14) = 9\n\n  SBOX[7][-2147483633] = 0x20000; // 8000000f (1, 15) = 2\n\n  SBOX[7][16] = 0x20820; // 10 (2, 0) = 7\n\n  SBOX[7][17] = 0x8020800; // 11 (2, 1) = 11\n\n  SBOX[7][18] = 0x20; // 12 (2, 2) = 4\n\n  SBOX[7][19] = 0x800; // 13 (2, 3) = 1\n\n  SBOX[7][20] = 0x8000800; // 14 (2, 4) = 9\n\n  SBOX[7][21] = 0x8000020; // 15 (2, 5) = 12\n\n  SBOX[7][22] = 0x8020020; // 16 (2, 6) = 14\n\n  SBOX[7][23] = 0x20000; // 17 (2, 7) = 2\n\n  SBOX[7][24] = 0x0; // 18 (2, 8) = 0\n\n  SBOX[7][25] = 0x20020; // 19 (2, 9) = 6\n\n  SBOX[7][26] = 0x8020000; // 1a (2, 10) = 10\n\n  SBOX[7][27] = 0x8000820; // 1b (2, 11) = 13\n\n  SBOX[7][28] = 0x8020820; // 1c (2, 12) = 15\n\n  SBOX[7][29] = 0x20800; // 1d (2, 13) = 3\n\n  SBOX[7][30] = 0x820; // 1e (2, 14) = 5\n\n  SBOX[7][31] = 0x8000000; // 1f (2, 15) = 8\n\n  SBOX[7][-2147483632] = 0x20000; // 80000010 (3, 0) = 2\n\n  SBOX[7][-2147483631] = 0x800; // 80000011 (3, 1) = 1\n\n  SBOX[7][-2147483630] = 0x8020020; // 80000012 (3, 2) = 14\n\n  SBOX[7][-2147483629] = 0x20820; // 80000013 (3, 3) = 7\n\n  SBOX[7][-2147483628] = 0x20; // 80000014 (3, 4) = 4\n\n  SBOX[7][-2147483627] = 0x8020000; // 80000015 (3, 5) = 10\n\n  SBOX[7][-2147483626] = 0x8000000; // 80000016 (3, 6) = 8\n\n  SBOX[7][-2147483625] = 0x8000820; // 80000017 (3, 7) = 13\n\n  SBOX[7][-2147483624] = 0x8020820; // 80000018 (3, 8) = 15\n\n  SBOX[7][-2147483623] = 0x8000020; // 80000019 (3, 9) = 12\n\n  SBOX[7][-2147483622] = 0x8000800; // 8000001a (3, 10) = 9\n\n  SBOX[7][-2147483621] = 0x0; // 8000001b (3, 11) = 0\n\n  SBOX[7][-2147483620] = 0x20800; // 8000001c (3, 12) = 3\n\n  SBOX[7][-2147483619] = 0x820; // 8000001d (3, 13) = 5\n\n  SBOX[7][-2147483618] = 0x20020; // 8000001e (3, 14) = 6\n\n  SBOX[7][-2147483617] = 0x8020800; // 8000001f (3, 15) = 11\n\n  State.prototype._exchangeLR = function (v, m) {\n    var t = (this.lhs >> v ^ this.rhs) & m;\n    this.rhs ^= t;\n    this.lhs ^= t << v;\n  };\n\n  State.prototype._exchangeRL = function (v, m) {\n    var t = (this.rhs >> v ^ this.lhs) & m;\n    this.lhs ^= t;\n    this.rhs ^= t << v;\n  };\n  /**\r\n   * Perform the initial permutation of the input to create the starting state\r\n   * of the algorithm. The initial permutation maps each consecutive bit of\r\n   * the input into a different byte of the state.\r\n   * \r\n   * <pre>\r\n   * The initial permutation is defined to be:\r\n   * \r\n   *      58    50   42    34    26   18    10    2  \r\n   *      60    52   44    36    28   20    12    4\r\n   *      62    54   46    38    30   22    14    6\r\n   *      64    56   48    40    32   24    16    8\r\n   *      57    49   41    33    25   17     9    1\r\n   *      59    51   43    35    27   19    11    3\r\n   *      61    53   45    37    29   21    13    5\r\n   *      63    55   47    39    31   23    15    7\r\n   * </pre>\r\n   * \r\n   * \r\n   * @param message\r\n   *            The message as an array of unsigned bytes.\r\n   * @param offset\r\n   *            The offset into the message that the current 64-bit block\r\n   *            begins.\r\n   * @returns the initial engine state\r\n   */\n\n\n  State.prototype.initialPerm = function (message, offset) {\n    var input = message.slice(offset, offset + 8);\n    this.lhs = (input[0] << 24) + (input[1] << 16) + (input[2] << 8) + input[3];\n    this.rhs = (input[4] << 24) + (input[5] << 16) + (input[6] << 8) + input[7];\n\n    this._exchangeLR(4, 0x0f0f0f0f);\n\n    this._exchangeLR(16, 0x0000ffff);\n\n    this._exchangeRL(2, 0x33333333);\n\n    this._exchangeRL(8, 0x00ff00ff);\n\n    this._exchangeLR(1, 0x55555555);\n  };\n  /**\r\n   * Perform one round of the DES algorithm using the given key. A round is\r\n   * defined as:\r\n   * \r\n   * <pre>\r\n   * L&amp;rsquo = R\r\n   * R&amp;rsquo = L &circ; f(R, k)\r\n   * </pre>\r\n   * \r\n   * where f consists of expanding, XORing with the key and contracting back\r\n   * with the SBOXes.\r\n   * \r\n   * Note that the final round is defined slightly differently as:\r\n   * \r\n   * <pre>\r\n   * L&amp;rsquo = L &circ; f(R, k)\r\n   * R&amp;rsquo = R\r\n   * </pre>\r\n   * \r\n   * Therefore in the final round this function produces LHS and RHS the wrong\r\n   * way around.\r\n   * \r\n   * @param k\r\n   *            the key\r\n   */\n\n\n  State.prototype.round = function (k) {\n    var r = this.rhs,\n        l = this.lhs;\n    var f = 0;\n\n    for (var i = 0; i < 8; i++) {\n      var v = (r ^ k[i]) & State.SBOX_MASK[i];\n      f += State.SBOX[i][v];\n    }\n\n    this.lhs = r;\n    this.rhs = l ^ f;\n  };\n  /**\r\n   * Apply the inverse of the initial permutation.\r\n   * \r\n   * <pre>\r\n   * The inverse is defined to be:\r\n   * \r\n   *      40     8   48    16    56   24    64   32\r\n   *      39     7   47    15    55   23    63   31\r\n   *      38     6   46    14    54   22    62   30\r\n   *      37     5   45    13    53   21    61   29\r\n   *      36     4   44    12    52   20    60   28\r\n   *      35     3   43    11    51   19    59   27\r\n   *      34     2   42    10    50   18    58   26\r\n   *      33     1   41     9    49   17    57   25\r\n   * </pre>\r\n   * \r\n   * @param cipherText\r\n   * @param offset\r\n   */\n\n\n  State.prototype.finalPerm = function (cipherText, offset) {\n    var t = this.lhs;\n    this.lhs = this.rhs;\n    this.rhs = t;\n\n    this._exchangeLR(1, 0x55555555);\n\n    this._exchangeRL(8, 0x00ff00ff);\n\n    this._exchangeRL(2, 0x33333333);\n\n    this._exchangeLR(16, 0x0000ffff);\n\n    this._exchangeLR(4, 0x0f0f0f0f);\n\n    cipherText[offset] = this.lhs >> 24 & 0xff;\n    cipherText[offset + 1] = this.lhs >> 16 & 0xff;\n    cipherText[offset + 2] = this.lhs >> 8 & 0xff;\n    cipherText[offset + 3] = this.lhs & 0xff;\n    cipherText[offset + 4] = this.rhs >> 24 & 0xff;\n    cipherText[offset + 5] = this.rhs >> 16 & 0xff;\n    cipherText[offset + 6] = this.rhs >> 8 & 0xff;\n    cipherText[offset + 7] = this.rhs & 0xff;\n  };\n  /**\r\n   * DES cipher\r\n   */\n\n\n  var DES = C.DES = {\n    _blocksize: 2,\n    _keyschedule: null,\n    _state: new State(),\n    _init: function (k) {\n      this._keyschedule = new KeySchedule(k);\n    },\n    encrypt: function (message, password, options) {\n      options = options || {}; // Determine mode\n\n      var mode = options.mode || new C.mode.OFB(); // Allow mode to override options\n\n      if (mode.fixOptions) mode.fixOptions(options);\n      var // Convert to bytes if message is a string\n      m = message.constructor == String ? UTF8.stringToBytes(message) : message,\n          // Generate random IV\n      iv = options.iv || util.randomBytes(8),\n          // Generate key\n      k = password.constructor == String ? // Derive key from passphrase\n      C.PBKDF2(password, iv, 8, {\n        asBytes: true\n      }) : // else, assume byte array representing cryptographic key\n      password; // Create key schedule\n\n      this._keyschedule = new KeySchedule(k); // Encrypt\n\n      mode.encrypt(DES, m, iv); // Return ciphertext\n\n      m = options.iv ? m : iv.concat(m);\n      return options && options.asBytes ? m : util.bytesToBase64(m);\n    },\n    _encryptblock: function (message, offset) {\n      this._state.initialPerm(message, offset);\n\n      for (var i = 0; i <= 15; i++) {\n        this._state.round(this._keyschedule.getKey(i));\n      }\n\n      this._state.finalPerm(message, offset);\n    },\n    decrypt: function (ciphertext, password, options) {\n      options = options || {}; // Determine mode\n\n      var mode = options.mode || new C.mode.OFB(); // Allow mode to override options\n\n      if (mode.fixOptions) mode.fixOptions(options);\n      var // Convert to bytes if ciphertext is a string\n      c = ciphertext.constructor == String ? util.base64ToBytes(ciphertext) : ciphertext,\n          // Separate IV and message\n      iv = options.iv || c.splice(0, 8),\n          // Generate key\n      k = password.constructor == String ? // Derive key from passphrase\n      C.PBKDF2(password, iv, 32, {\n        asBytes: true\n      }) : // else, assume byte array representing cryptographic key\n      password; // Create key schedule\n\n      this._keyschedule = new KeySchedule(k);\n      mode.decrypt(DES, c, iv); // Return plaintext\n\n      return options && options.asBytes ? c : UTF8.bytesToString(c);\n    },\n    _decryptblock: function (message, offset) {\n      this._state.initialPerm(message, offset);\n\n      for (var i = 15; i >= 0; i--) {\n        this._state.round(this._keyschedule.getKey(i));\n      }\n\n      this._state.finalPerm(message, offset);\n    }\n  };\n})();","map":{"version":3,"names":["C","window","require","Crypto","util","charenc","UTF8","KeySchedule","key","keys","Array","_initialiseKeys","PC1_offsets","PC1_masks","PC2_offsets1","PC2_offsets2","PC2_masks1","PC2_masks2","keyShifts","prototype","i","bits","bits1","slice","bits2","concat","k","s","j","getKey","State","lhs","rhs","SBOX_MASK","SBOX","_exchangeLR","v","m","t","_exchangeRL","initialPerm","message","offset","input","round","r","l","f","finalPerm","cipherText","DES","_blocksize","_keyschedule","_state","_init","encrypt","password","options","mode","OFB","fixOptions","constructor","String","stringToBytes","iv","randomBytes","PBKDF2","asBytes","bytesToBase64","_encryptblock","decrypt","ciphertext","c","base64ToBytes","splice","bytesToString","_decryptblock"],"sources":["D:/MySource/DAW_C4_Gr1_Eq7/FrontEndMF/node_modules/cryptojs/lib/DES.js"],"sourcesContent":["/**\r\n * Definition of Data Encryption Standard (DES) taken from:\r\n * http://www.itl.nist.gov/fipspubs/fip46-2.htm\r\n */\r\n\r\n(function() {\r\n\r\nvar C = (typeof window === 'undefined') ? require('./Crypto').Crypto : window.Crypto;\r\n\r\n    // Shortcuts\r\n    var util = C.util, charenc = C.charenc, UTF8 = charenc.UTF8;\r\n\r\n    /***************************************************************************\r\n     * \r\n     * DES Key Schedule.\r\n     * \r\n     * The Key consists of 16 sub-keys of 48 bits each. As each sub-key is\r\n     * applied to an expanded 32-bit value where each 4 bits of input is\r\n     * expanded into 6 bits of output the sub-key can be broken down into 8\r\n     * 32-bit values which allows the key to be used without expansion.\r\n     * \r\n     * To create the 16 sub-keys, 56 bits are selected from the input 64 bit key\r\n     * according to <i>PC1</i>. Each sub-key is generated by left rotating the\r\n     * bits a different amount and then selecting 48 bits according to <i>PC2</i>.\r\n     * \r\n     **************************************************************************/\r\n\r\n    var KeySchedule;\r\n\r\n    /**\r\n     * Representation of a DES key schedule.\r\n     * \r\n     * @param {Array\r\n     *            of 8 bytes} key The cipher key\r\n     * \r\n     * @constructor\r\n     */\r\n    KeySchedule = function(key) {\r\n        /**\r\n         * The schedule of 16 keys\r\n         */\r\n        this.keys = new Array(16);\r\n        this._initialiseKeys(key);\r\n    };\r\n\r\n    /**\r\n     * Permuted Choice 1 (PC1) byte offsets into the key. Each of the 56 entries\r\n     * selects one bit of DES's 56 bit key.\r\n     * <p>\r\n     * \r\n     * <pre>\r\n     * The PC1 is defined as:\r\n     * \r\n     * 57,   49,    41,   33,    25,    17,    9,\r\n     *  1,   58,    50,   42,    34,    26,   18,\r\n     * 10,    2,    59,   51,    43,    35,   27,\r\n     * 19,   11,     3,   60,    52,    44,   36,\r\n     * 63,   55,    47,   39,    31,    23,   15,\r\n     *  7,   62,    54,   46,    38,    30,   22,\r\n     * 14,    6,    61,   53,    45,    37,   29,\r\n     * 21,   13,     5,   28,    20,    12,    4\r\n     * </pre>\r\n     * \r\n     * We represent this as an offset into an 8-byte array and a bit mask upon\r\n     * that byte. For example 57=(7*8)+1 so is the first (MSB) of the 7th byte.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.PC1_offsets = [ 7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0,\r\n            7, 6, 5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 7, 6, 5, 4, 3, 2, 1, 0, 7, 6,\r\n            5, 4, 3, 2, 1, 0, 7, 6, 5, 4, 3, 2, 1, 0, 3, 2, 1, 0 ];\r\n\r\n    /**\r\n     * Permuted Choice 1 (PC1) bit masks. Each of the 56 entries selects one bit\r\n     * of DES's 56 bit key.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.PC1_masks = [ 128, 128, 128, 128, 128, 128, 128, 128, 64, 64,\r\n            64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32, 32, 32, 16, 16, 16,\r\n            16, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8,\r\n            8, 8, 8, 16, 16, 16, 16 ];\r\n\r\n    /**\r\n     * Permuted Choice 2 (PC2) selects the active 48 bits from the 56 bits of\r\n     * the key.\r\n     * <p>\r\n     * \r\n     * <pre>\r\n     * The PC2 is defined as:\r\n     * \r\n     * 14,   17,   11,   24,    1,    5,\r\n     *  3,   28,   15,    6,   21,   10,\r\n     * 23,   19,   12,    4,   26,    8,\r\n     * 16,    7,   27,   20,   13,    2,\r\n     * 41,   52,   31,   37,   47,   55,\r\n     * 30,   40,   51,   45,   33,   48,\r\n     * 44,   49,   39,   56,   34,   53,\r\n     * 46,   42,   50,   36,   29,   32\r\n     * </pre>\r\n     * \r\n     * We invert the choice to specify what each bit adds to each 6-bit value of\r\n     * the key. For example, bit 1 is the 5th bit selected so this add 2 to the\r\n     * first 6-bit value.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.PC2_offsets1 = [ 0, 3, 1, 2, 0, 1, 3, 2, 0, 1, 0, 2, 3, 0, 1,\r\n            3, 0, 0, 2, 3, 1, 0, 2, 0, 0, 2, 3, 1 ];\r\n\r\n    /**\r\n     * PC2 offsets for 2nd block.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.PC2_offsets2 = [ 7, 5, 4, 7, 5, 6, 0, 7, 4, 0, 6, 5, 4, 7, 0,\r\n            6, 5, 7, 4, 5, 6, 7, 5, 4, 6, 0, 4, 6 ];\r\n\r\n    /**\r\n     * Permuted Choice 2 (PC2) masks for 1st block.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.PC2_masks1 = [ 2, 1, 32, 4, 1, 4, 16, 1, 0, 1, 8, 8, 2, 32, 8,\r\n            32, 16, 0, 16, 4, 2, 0, 32, 4, 0, 2, 8, 16 ];\r\n\r\n    /**\r\n     * PC2 masks for 2nd block.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.PC2_masks2 = [ 2, 32, 8, 1, 2, 2, 0, 4, 4, 0, 8, 16, 32, 16, 0,\r\n            32, 4, 32, 2, 1, 16, 8, 8, 16, 1, 0, 1, 4 ];\r\n\r\n    /**\r\n     * Cumulative key shifts.\r\n     * \r\n     * @constant\r\n     */\r\n    KeySchedule.keyShifts = [ 1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23,\r\n            25, 27, 28 ];\r\n\r\n    KeySchedule.prototype._initialiseKeys = function(key) {\r\n        var i;\r\n\r\n        // extract 56 key bits in order determined by PC1\r\n        var bits = new Array(56);\r\n        for (i = 0; i < 56; i++) {\r\n            bits[i] = (key[KeySchedule.PC1_offsets[i]] & KeySchedule.PC1_masks[i]) != 0;\r\n        }\r\n\r\n        // split 56 bits into two 28-bit chunks\r\n        var bits1 = bits.slice(0, 28);\r\n        var bits2 = bits.slice(28, 56);\r\n\r\n        // duplicate each half to allow for easy bit shifts\r\n        bits1 = bits1.concat(bits1);\r\n        bits2 = bits2.concat(bits2);\r\n\r\n        // assemble the 16 keys\r\n        for (i = 0; i < 16; i++) {\r\n            var k = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\r\n\r\n            // select the bits of the key according to PC2\r\n            var s = KeySchedule.keyShifts[i];\r\n            for ( var j = 0; j < 28; j++) {\r\n                if (bits1[j + s]) {\r\n                    k[KeySchedule.PC2_offsets1[j]] += KeySchedule.PC2_masks1[j];\r\n                }\r\n                if (bits2[j + s]) {\r\n                    k[KeySchedule.PC2_offsets2[j]] += KeySchedule.PC2_masks2[j];\r\n                }\r\n            }\r\n\r\n            // Scale each of the 8 blocks to a 32-bit mask.\r\n            k[0] = ((k[0] & 0x1f) << 27) + ((k[0] & 0x20) >> 5);\r\n            for ( var j = 1; j <= 6; j++) {\r\n                k[j] = k[j] << (27 - 4 * j);\r\n            }\r\n            k[7] = ((k[7] & 0x3e) >> 1) + ((k[7] & 0x1) << 31);\r\n            this.keys[i] = k;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieve the key for a specified round\r\n     * \r\n     * @param i\r\n     *            the round\r\n     * @returns the key\r\n     */\r\n    KeySchedule.prototype.getKey = function(i) {\r\n        return this.keys[i];\r\n    };\r\n\r\n    /***************************************************************************\r\n     * \r\n     * DES Engine State\r\n     * \r\n     **************************************************************************/\r\n\r\n    var State;\r\n\r\n    /**\r\n     * The algorithm's state. DES operates on two sets of 32-bits, with each\r\n     * block of 32-bits treated as a single number.\r\n     * \r\n     * @class\r\n     */\r\n    State = function() {\r\n        /** The LHS of the Feistel scheme */\r\n        this.lhs = 0;\r\n        /** The RHS of the Feistel scheme */\r\n        this.rhs = 0;\r\n    };\r\n\r\n    /**\r\n     * The masks that select the SBOX input. Each SBOX accepts 6 bits from the\r\n     * input.\r\n     * \r\n     * @constant\r\n     */\r\n    State.SBOX_MASK = [ 0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\r\n            0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f ];\r\n\r\n    /**\r\n     * The SBOXes. The 8 SBOXes each map 6 bit masked bit of the input to 4 bits\r\n     * of output. These SBOXes include the post SBOX permutation and benefit\r\n     * from JavaScript's sparse arrays to make specifying the input match\r\n     * simple.\r\n     * \r\n     * @constant\r\n     */\r\n    State.SBOX = new Array(8);\r\n\r\n    var SBOX = State.SBOX;\r\n\r\n    SBOX[0] = new Array();\r\n    SBOX[0][0] = 0x808200; // 0 (0, 0) = 14\r\n    SBOX[0][268435456] = 0x8000; // 10000000 (0, 1) = 4\r\n    SBOX[0][536870912] = 0x808002; // 20000000 (0, 2) = 13\r\n    SBOX[0][805306368] = 0x2; // 30000000 (0, 3) = 1\r\n    SBOX[0][1073741824] = 0x200; // 40000000 (0, 4) = 2\r\n    SBOX[0][1342177280] = 0x808202; // 50000000 (0, 5) = 15\r\n    SBOX[0][1610612736] = 0x800202; // 60000000 (0, 6) = 11\r\n    SBOX[0][1879048192] = 0x800000; // 70000000 (0, 7) = 8\r\n    SBOX[0][-2147483648] = 0x202; // 80000000 (0, 8) = 3\r\n    SBOX[0][-1879048192] = 0x800200; // 90000000 (0, 9) = 10\r\n    SBOX[0][-1610612736] = 0x8200; // a0000000 (0, 10) = 6\r\n    SBOX[0][-1342177280] = 0x808000; // b0000000 (0, 11) = 12\r\n    SBOX[0][-1073741824] = 0x8002; // c0000000 (0, 12) = 5\r\n    SBOX[0][-805306368] = 0x800002; // d0000000 (0, 13) = 9\r\n    SBOX[0][-536870912] = 0x0; // e0000000 (0, 14) = 0\r\n    SBOX[0][-268435456] = 0x8202; // f0000000 (0, 15) = 7\r\n    SBOX[0][134217728] = 0x0; // 8000000 (1, 0) = 0\r\n    SBOX[0][402653184] = 0x808202; // 18000000 (1, 1) = 15\r\n    SBOX[0][671088640] = 0x8202; // 28000000 (1, 2) = 7\r\n    SBOX[0][939524096] = 0x8000; // 38000000 (1, 3) = 4\r\n    SBOX[0][1207959552] = 0x808200; // 48000000 (1, 4) = 14\r\n    SBOX[0][1476395008] = 0x200; // 58000000 (1, 5) = 2\r\n    SBOX[0][1744830464] = 0x808002; // 68000000 (1, 6) = 13\r\n    SBOX[0][2013265920] = 0x2; // 78000000 (1, 7) = 1\r\n    SBOX[0][-2013265920] = 0x800200; // 88000000 (1, 8) = 10\r\n    SBOX[0][-1744830464] = 0x8200; // 98000000 (1, 9) = 6\r\n    SBOX[0][-1476395008] = 0x808000; // a8000000 (1, 10) = 12\r\n    SBOX[0][-1207959552] = 0x800202; // b8000000 (1, 11) = 11\r\n    SBOX[0][-939524096] = 0x800002; // c8000000 (1, 12) = 9\r\n    SBOX[0][-671088640] = 0x8002; // d8000000 (1, 13) = 5\r\n    SBOX[0][-402653184] = 0x202; // e8000000 (1, 14) = 3\r\n    SBOX[0][-134217728] = 0x800000; // f8000000 (1, 15) = 8\r\n    SBOX[0][1] = 0x8000; // 1 (2, 0) = 4\r\n    SBOX[0][268435457] = 0x2; // 10000001 (2, 1) = 1\r\n    SBOX[0][536870913] = 0x808200; // 20000001 (2, 2) = 14\r\n    SBOX[0][805306369] = 0x800000; // 30000001 (2, 3) = 8\r\n    SBOX[0][1073741825] = 0x808002; // 40000001 (2, 4) = 13\r\n    SBOX[0][1342177281] = 0x8200; // 50000001 (2, 5) = 6\r\n    SBOX[0][1610612737] = 0x200; // 60000001 (2, 6) = 2\r\n    SBOX[0][1879048193] = 0x800202; // 70000001 (2, 7) = 11\r\n    SBOX[0][-2147483647] = 0x808202; // 80000001 (2, 8) = 15\r\n    SBOX[0][-1879048191] = 0x808000; // 90000001 (2, 9) = 12\r\n    SBOX[0][-1610612735] = 0x800002; // a0000001 (2, 10) = 9\r\n    SBOX[0][-1342177279] = 0x8202; // b0000001 (2, 11) = 7\r\n    SBOX[0][-1073741823] = 0x202; // c0000001 (2, 12) = 3\r\n    SBOX[0][-805306367] = 0x800200; // d0000001 (2, 13) = 10\r\n    SBOX[0][-536870911] = 0x8002; // e0000001 (2, 14) = 5\r\n    SBOX[0][-268435455] = 0x0; // f0000001 (2, 15) = 0\r\n    SBOX[0][134217729] = 0x808202; // 8000001 (3, 0) = 15\r\n    SBOX[0][402653185] = 0x808000; // 18000001 (3, 1) = 12\r\n    SBOX[0][671088641] = 0x800000; // 28000001 (3, 2) = 8\r\n    SBOX[0][939524097] = 0x200; // 38000001 (3, 3) = 2\r\n    SBOX[0][1207959553] = 0x8000; // 48000001 (3, 4) = 4\r\n    SBOX[0][1476395009] = 0x800002; // 58000001 (3, 5) = 9\r\n    SBOX[0][1744830465] = 0x2; // 68000001 (3, 6) = 1\r\n    SBOX[0][2013265921] = 0x8202; // 78000001 (3, 7) = 7\r\n    SBOX[0][-2013265919] = 0x8002; // 88000001 (3, 8) = 5\r\n    SBOX[0][-1744830463] = 0x800202; // 98000001 (3, 9) = 11\r\n    SBOX[0][-1476395007] = 0x202; // a8000001 (3, 10) = 3\r\n    SBOX[0][-1207959551] = 0x808200; // b8000001 (3, 11) = 14\r\n    SBOX[0][-939524095] = 0x800200; // c8000001 (3, 12) = 10\r\n    SBOX[0][-671088639] = 0x0; // d8000001 (3, 13) = 0\r\n    SBOX[0][-402653183] = 0x8200; // e8000001 (3, 14) = 6\r\n    SBOX[0][-134217727] = 0x808002; // f8000001 (3, 15) = 13\r\n\r\n    SBOX[1] = new Array();\r\n    SBOX[1][0] = 0x40084010; // 0 (0, 0) = 15\r\n    SBOX[1][16777216] = 0x4000; // 1000000 (0, 1) = 1\r\n    SBOX[1][33554432] = 0x80000; // 2000000 (0, 2) = 8\r\n    SBOX[1][50331648] = 0x40080010; // 3000000 (0, 3) = 14\r\n    SBOX[1][67108864] = 0x40000010; // 4000000 (0, 4) = 6\r\n    SBOX[1][83886080] = 0x40084000; // 5000000 (0, 5) = 11\r\n    SBOX[1][100663296] = 0x40004000; // 6000000 (0, 6) = 3\r\n    SBOX[1][117440512] = 0x10; // 7000000 (0, 7) = 4\r\n    SBOX[1][134217728] = 0x84000; // 8000000 (0, 8) = 9\r\n    SBOX[1][150994944] = 0x40004010; // 9000000 (0, 9) = 7\r\n    SBOX[1][167772160] = 0x40000000; // a000000 (0, 10) = 2\r\n    SBOX[1][184549376] = 0x84010; // b000000 (0, 11) = 13\r\n    SBOX[1][201326592] = 0x80010; // c000000 (0, 12) = 12\r\n    SBOX[1][218103808] = 0x0; // d000000 (0, 13) = 0\r\n    SBOX[1][234881024] = 0x4010; // e000000 (0, 14) = 5\r\n    SBOX[1][251658240] = 0x40080000; // f000000 (0, 15) = 10\r\n    SBOX[1][8388608] = 0x40004000; // 800000 (1, 0) = 3\r\n    SBOX[1][25165824] = 0x84010; // 1800000 (1, 1) = 13\r\n    SBOX[1][41943040] = 0x10; // 2800000 (1, 2) = 4\r\n    SBOX[1][58720256] = 0x40004010; // 3800000 (1, 3) = 7\r\n    SBOX[1][75497472] = 0x40084010; // 4800000 (1, 4) = 15\r\n    SBOX[1][92274688] = 0x40000000; // 5800000 (1, 5) = 2\r\n    SBOX[1][109051904] = 0x80000; // 6800000 (1, 6) = 8\r\n    SBOX[1][125829120] = 0x40080010; // 7800000 (1, 7) = 14\r\n    SBOX[1][142606336] = 0x80010; // 8800000 (1, 8) = 12\r\n    SBOX[1][159383552] = 0x0; // 9800000 (1, 9) = 0\r\n    SBOX[1][176160768] = 0x4000; // a800000 (1, 10) = 1\r\n    SBOX[1][192937984] = 0x40080000; // b800000 (1, 11) = 10\r\n    SBOX[1][209715200] = 0x40000010; // c800000 (1, 12) = 6\r\n    SBOX[1][226492416] = 0x84000; // d800000 (1, 13) = 9\r\n    SBOX[1][243269632] = 0x40084000; // e800000 (1, 14) = 11\r\n    SBOX[1][260046848] = 0x4010; // f800000 (1, 15) = 5\r\n    SBOX[1][268435456] = 0x0; // 10000000 (2, 0) = 0\r\n    SBOX[1][285212672] = 0x40080010; // 11000000 (2, 1) = 14\r\n    SBOX[1][301989888] = 0x40004010; // 12000000 (2, 2) = 7\r\n    SBOX[1][318767104] = 0x40084000; // 13000000 (2, 3) = 11\r\n    SBOX[1][335544320] = 0x40080000; // 14000000 (2, 4) = 10\r\n    SBOX[1][352321536] = 0x10; // 15000000 (2, 5) = 4\r\n    SBOX[1][369098752] = 0x84010; // 16000000 (2, 6) = 13\r\n    SBOX[1][385875968] = 0x4000; // 17000000 (2, 7) = 1\r\n    SBOX[1][402653184] = 0x4010; // 18000000 (2, 8) = 5\r\n    SBOX[1][419430400] = 0x80000; // 19000000 (2, 9) = 8\r\n    SBOX[1][436207616] = 0x80010; // 1a000000 (2, 10) = 12\r\n    SBOX[1][452984832] = 0x40000010; // 1b000000 (2, 11) = 6\r\n    SBOX[1][469762048] = 0x84000; // 1c000000 (2, 12) = 9\r\n    SBOX[1][486539264] = 0x40004000; // 1d000000 (2, 13) = 3\r\n    SBOX[1][503316480] = 0x40000000; // 1e000000 (2, 14) = 2\r\n    SBOX[1][520093696] = 0x40084010; // 1f000000 (2, 15) = 15\r\n    SBOX[1][276824064] = 0x84010; // 10800000 (3, 0) = 13\r\n    SBOX[1][293601280] = 0x80000; // 11800000 (3, 1) = 8\r\n    SBOX[1][310378496] = 0x40080000; // 12800000 (3, 2) = 10\r\n    SBOX[1][327155712] = 0x4000; // 13800000 (3, 3) = 1\r\n    SBOX[1][343932928] = 0x40004000; // 14800000 (3, 4) = 3\r\n    SBOX[1][360710144] = 0x40084010; // 15800000 (3, 5) = 15\r\n    SBOX[1][377487360] = 0x10; // 16800000 (3, 6) = 4\r\n    SBOX[1][394264576] = 0x40000000; // 17800000 (3, 7) = 2\r\n    SBOX[1][411041792] = 0x40084000; // 18800000 (3, 8) = 11\r\n    SBOX[1][427819008] = 0x40000010; // 19800000 (3, 9) = 6\r\n    SBOX[1][444596224] = 0x40004010; // 1a800000 (3, 10) = 7\r\n    SBOX[1][461373440] = 0x80010; // 1b800000 (3, 11) = 12\r\n    SBOX[1][478150656] = 0x0; // 1c800000 (3, 12) = 0\r\n    SBOX[1][494927872] = 0x4010; // 1d800000 (3, 13) = 5\r\n    SBOX[1][511705088] = 0x40080010; // 1e800000 (3, 14) = 14\r\n    SBOX[1][528482304] = 0x84000; // 1f800000 (3, 15) = 9\r\n\r\n    SBOX[2] = new Array();\r\n    SBOX[2][0] = 0x104; // 0 (0, 0) = 10\r\n    SBOX[2][1048576] = 0x0; // 100000 (0, 1) = 0\r\n    SBOX[2][2097152] = 0x4000100; // 200000 (0, 2) = 9\r\n    SBOX[2][3145728] = 0x10104; // 300000 (0, 3) = 14\r\n    SBOX[2][4194304] = 0x10004; // 400000 (0, 4) = 6\r\n    SBOX[2][5242880] = 0x4000004; // 500000 (0, 5) = 3\r\n    SBOX[2][6291456] = 0x4010104; // 600000 (0, 6) = 15\r\n    SBOX[2][7340032] = 0x4010000; // 700000 (0, 7) = 5\r\n    SBOX[2][8388608] = 0x4000000; // 800000 (0, 8) = 1\r\n    SBOX[2][9437184] = 0x4010100; // 900000 (0, 9) = 13\r\n    SBOX[2][10485760] = 0x10100; // a00000 (0, 10) = 12\r\n    SBOX[2][11534336] = 0x4010004; // b00000 (0, 11) = 7\r\n    SBOX[2][12582912] = 0x4000104; // c00000 (0, 12) = 11\r\n    SBOX[2][13631488] = 0x10000; // d00000 (0, 13) = 4\r\n    SBOX[2][14680064] = 0x4; // e00000 (0, 14) = 2\r\n    SBOX[2][15728640] = 0x100; // f00000 (0, 15) = 8\r\n    SBOX[2][524288] = 0x4010100; // 80000 (1, 0) = 13\r\n    SBOX[2][1572864] = 0x4010004; // 180000 (1, 1) = 7\r\n    SBOX[2][2621440] = 0x0; // 280000 (1, 2) = 0\r\n    SBOX[2][3670016] = 0x4000100; // 380000 (1, 3) = 9\r\n    SBOX[2][4718592] = 0x4000004; // 480000 (1, 4) = 3\r\n    SBOX[2][5767168] = 0x10000; // 580000 (1, 5) = 4\r\n    SBOX[2][6815744] = 0x10004; // 680000 (1, 6) = 6\r\n    SBOX[2][7864320] = 0x104; // 780000 (1, 7) = 10\r\n    SBOX[2][8912896] = 0x4; // 880000 (1, 8) = 2\r\n    SBOX[2][9961472] = 0x100; // 980000 (1, 9) = 8\r\n    SBOX[2][11010048] = 0x4010000; // a80000 (1, 10) = 5\r\n    SBOX[2][12058624] = 0x10104; // b80000 (1, 11) = 14\r\n    SBOX[2][13107200] = 0x10100; // c80000 (1, 12) = 12\r\n    SBOX[2][14155776] = 0x4000104; // d80000 (1, 13) = 11\r\n    SBOX[2][15204352] = 0x4010104; // e80000 (1, 14) = 15\r\n    SBOX[2][16252928] = 0x4000000; // f80000 (1, 15) = 1\r\n    SBOX[2][16777216] = 0x4010100; // 1000000 (2, 0) = 13\r\n    SBOX[2][17825792] = 0x10004; // 1100000 (2, 1) = 6\r\n    SBOX[2][18874368] = 0x10000; // 1200000 (2, 2) = 4\r\n    SBOX[2][19922944] = 0x4000100; // 1300000 (2, 3) = 9\r\n    SBOX[2][20971520] = 0x100; // 1400000 (2, 4) = 8\r\n    SBOX[2][22020096] = 0x4010104; // 1500000 (2, 5) = 15\r\n    SBOX[2][23068672] = 0x4000004; // 1600000 (2, 6) = 3\r\n    SBOX[2][24117248] = 0x0; // 1700000 (2, 7) = 0\r\n    SBOX[2][25165824] = 0x4000104; // 1800000 (2, 8) = 11\r\n    SBOX[2][26214400] = 0x4000000; // 1900000 (2, 9) = 1\r\n    SBOX[2][27262976] = 0x4; // 1a00000 (2, 10) = 2\r\n    SBOX[2][28311552] = 0x10100; // 1b00000 (2, 11) = 12\r\n    SBOX[2][29360128] = 0x4010000; // 1c00000 (2, 12) = 5\r\n    SBOX[2][30408704] = 0x104; // 1d00000 (2, 13) = 10\r\n    SBOX[2][31457280] = 0x10104; // 1e00000 (2, 14) = 14\r\n    SBOX[2][32505856] = 0x4010004; // 1f00000 (2, 15) = 7\r\n    SBOX[2][17301504] = 0x4000000; // 1080000 (3, 0) = 1\r\n    SBOX[2][18350080] = 0x104; // 1180000 (3, 1) = 10\r\n    SBOX[2][19398656] = 0x4010100; // 1280000 (3, 2) = 13\r\n    SBOX[2][20447232] = 0x0; // 1380000 (3, 3) = 0\r\n    SBOX[2][21495808] = 0x10004; // 1480000 (3, 4) = 6\r\n    SBOX[2][22544384] = 0x4000100; // 1580000 (3, 5) = 9\r\n    SBOX[2][23592960] = 0x100; // 1680000 (3, 6) = 8\r\n    SBOX[2][24641536] = 0x4010004; // 1780000 (3, 7) = 7\r\n    SBOX[2][25690112] = 0x10000; // 1880000 (3, 8) = 4\r\n    SBOX[2][26738688] = 0x4010104; // 1980000 (3, 9) = 15\r\n    SBOX[2][27787264] = 0x10104; // 1a80000 (3, 10) = 14\r\n    SBOX[2][28835840] = 0x4000004; // 1b80000 (3, 11) = 3\r\n    SBOX[2][29884416] = 0x4000104; // 1c80000 (3, 12) = 11\r\n    SBOX[2][30932992] = 0x4010000; // 1d80000 (3, 13) = 5\r\n    SBOX[2][31981568] = 0x4; // 1e80000 (3, 14) = 2\r\n    SBOX[2][33030144] = 0x10100; // 1f80000 (3, 15) = 12\r\n\r\n    SBOX[3] = new Array();\r\n    SBOX[3][0] = 0x80401000; // 0 (0, 0) = 7\r\n    SBOX[3][65536] = 0x80001040; // 10000 (0, 1) = 13\r\n    SBOX[3][131072] = 0x401040; // 20000 (0, 2) = 14\r\n    SBOX[3][196608] = 0x80400000; // 30000 (0, 3) = 3\r\n    SBOX[3][262144] = 0x0; // 40000 (0, 4) = 0\r\n    SBOX[3][327680] = 0x401000; // 50000 (0, 5) = 6\r\n    SBOX[3][393216] = 0x80000040; // 60000 (0, 6) = 9\r\n    SBOX[3][458752] = 0x400040; // 70000 (0, 7) = 10\r\n    SBOX[3][524288] = 0x80000000; // 80000 (0, 8) = 1\r\n    SBOX[3][589824] = 0x400000; // 90000 (0, 9) = 2\r\n    SBOX[3][655360] = 0x40; // a0000 (0, 10) = 8\r\n    SBOX[3][720896] = 0x80001000; // b0000 (0, 11) = 5\r\n    SBOX[3][786432] = 0x80400040; // c0000 (0, 12) = 11\r\n    SBOX[3][851968] = 0x1040; // d0000 (0, 13) = 12\r\n    SBOX[3][917504] = 0x1000; // e0000 (0, 14) = 4\r\n    SBOX[3][983040] = 0x80401040; // f0000 (0, 15) = 15\r\n    SBOX[3][32768] = 0x80001040; // 8000 (1, 0) = 13\r\n    SBOX[3][98304] = 0x40; // 18000 (1, 1) = 8\r\n    SBOX[3][163840] = 0x80400040; // 28000 (1, 2) = 11\r\n    SBOX[3][229376] = 0x80001000; // 38000 (1, 3) = 5\r\n    SBOX[3][294912] = 0x401000; // 48000 (1, 4) = 6\r\n    SBOX[3][360448] = 0x80401040; // 58000 (1, 5) = 15\r\n    SBOX[3][425984] = 0x0; // 68000 (1, 6) = 0\r\n    SBOX[3][491520] = 0x80400000; // 78000 (1, 7) = 3\r\n    SBOX[3][557056] = 0x1000; // 88000 (1, 8) = 4\r\n    SBOX[3][622592] = 0x80401000; // 98000 (1, 9) = 7\r\n    SBOX[3][688128] = 0x400000; // a8000 (1, 10) = 2\r\n    SBOX[3][753664] = 0x1040; // b8000 (1, 11) = 12\r\n    SBOX[3][819200] = 0x80000000; // c8000 (1, 12) = 1\r\n    SBOX[3][884736] = 0x400040; // d8000 (1, 13) = 10\r\n    SBOX[3][950272] = 0x401040; // e8000 (1, 14) = 14\r\n    SBOX[3][1015808] = 0x80000040; // f8000 (1, 15) = 9\r\n    SBOX[3][1048576] = 0x400040; // 100000 (2, 0) = 10\r\n    SBOX[3][1114112] = 0x401000; // 110000 (2, 1) = 6\r\n    SBOX[3][1179648] = 0x80000040; // 120000 (2, 2) = 9\r\n    SBOX[3][1245184] = 0x0; // 130000 (2, 3) = 0\r\n    SBOX[3][1310720] = 0x1040; // 140000 (2, 4) = 12\r\n    SBOX[3][1376256] = 0x80400040; // 150000 (2, 5) = 11\r\n    SBOX[3][1441792] = 0x80401000; // 160000 (2, 6) = 7\r\n    SBOX[3][1507328] = 0x80001040; // 170000 (2, 7) = 13\r\n    SBOX[3][1572864] = 0x80401040; // 180000 (2, 8) = 15\r\n    SBOX[3][1638400] = 0x80000000; // 190000 (2, 9) = 1\r\n    SBOX[3][1703936] = 0x80400000; // 1a0000 (2, 10) = 3\r\n    SBOX[3][1769472] = 0x401040; // 1b0000 (2, 11) = 14\r\n    SBOX[3][1835008] = 0x80001000; // 1c0000 (2, 12) = 5\r\n    SBOX[3][1900544] = 0x400000; // 1d0000 (2, 13) = 2\r\n    SBOX[3][1966080] = 0x40; // 1e0000 (2, 14) = 8\r\n    SBOX[3][2031616] = 0x1000; // 1f0000 (2, 15) = 4\r\n    SBOX[3][1081344] = 0x80400000; // 108000 (3, 0) = 3\r\n    SBOX[3][1146880] = 0x80401040; // 118000 (3, 1) = 15\r\n    SBOX[3][1212416] = 0x0; // 128000 (3, 2) = 0\r\n    SBOX[3][1277952] = 0x401000; // 138000 (3, 3) = 6\r\n    SBOX[3][1343488] = 0x400040; // 148000 (3, 4) = 10\r\n    SBOX[3][1409024] = 0x80000000; // 158000 (3, 5) = 1\r\n    SBOX[3][1474560] = 0x80001040; // 168000 (3, 6) = 13\r\n    SBOX[3][1540096] = 0x40; // 178000 (3, 7) = 8\r\n    SBOX[3][1605632] = 0x80000040; // 188000 (3, 8) = 9\r\n    SBOX[3][1671168] = 0x1000; // 198000 (3, 9) = 4\r\n    SBOX[3][1736704] = 0x80001000; // 1a8000 (3, 10) = 5\r\n    SBOX[3][1802240] = 0x80400040; // 1b8000 (3, 11) = 11\r\n    SBOX[3][1867776] = 0x1040; // 1c8000 (3, 12) = 12\r\n    SBOX[3][1933312] = 0x80401000; // 1d8000 (3, 13) = 7\r\n    SBOX[3][1998848] = 0x400000; // 1e8000 (3, 14) = 2\r\n    SBOX[3][2064384] = 0x401040; // 1f8000 (3, 15) = 14\r\n\r\n    SBOX[4] = new Array();\r\n    SBOX[4][0] = 0x80; // 0 (0, 0) = 2\r\n    SBOX[4][4096] = 0x1040000; // 1000 (0, 1) = 12\r\n    SBOX[4][8192] = 0x40000; // 2000 (0, 2) = 4\r\n    SBOX[4][12288] = 0x20000000; // 3000 (0, 3) = 1\r\n    SBOX[4][16384] = 0x20040080; // 4000 (0, 4) = 7\r\n    SBOX[4][20480] = 0x1000080; // 5000 (0, 5) = 10\r\n    SBOX[4][24576] = 0x21000080; // 6000 (0, 6) = 11\r\n    SBOX[4][28672] = 0x40080; // 7000 (0, 7) = 6\r\n    SBOX[4][32768] = 0x1000000; // 8000 (0, 8) = 8\r\n    SBOX[4][36864] = 0x20040000; // 9000 (0, 9) = 5\r\n    SBOX[4][40960] = 0x20000080; // a000 (0, 10) = 3\r\n    SBOX[4][45056] = 0x21040080; // b000 (0, 11) = 15\r\n    SBOX[4][49152] = 0x21040000; // c000 (0, 12) = 13\r\n    SBOX[4][53248] = 0x0; // d000 (0, 13) = 0\r\n    SBOX[4][57344] = 0x1040080; // e000 (0, 14) = 14\r\n    SBOX[4][61440] = 0x21000000; // f000 (0, 15) = 9\r\n    SBOX[4][2048] = 0x1040080; // 800 (1, 0) = 14\r\n    SBOX[4][6144] = 0x21000080; // 1800 (1, 1) = 11\r\n    SBOX[4][10240] = 0x80; // 2800 (1, 2) = 2\r\n    SBOX[4][14336] = 0x1040000; // 3800 (1, 3) = 12\r\n    SBOX[4][18432] = 0x40000; // 4800 (1, 4) = 4\r\n    SBOX[4][22528] = 0x20040080; // 5800 (1, 5) = 7\r\n    SBOX[4][26624] = 0x21040000; // 6800 (1, 6) = 13\r\n    SBOX[4][30720] = 0x20000000; // 7800 (1, 7) = 1\r\n    SBOX[4][34816] = 0x20040000; // 8800 (1, 8) = 5\r\n    SBOX[4][38912] = 0x0; // 9800 (1, 9) = 0\r\n    SBOX[4][43008] = 0x21040080; // a800 (1, 10) = 15\r\n    SBOX[4][47104] = 0x1000080; // b800 (1, 11) = 10\r\n    SBOX[4][51200] = 0x20000080; // c800 (1, 12) = 3\r\n    SBOX[4][55296] = 0x21000000; // d800 (1, 13) = 9\r\n    SBOX[4][59392] = 0x1000000; // e800 (1, 14) = 8\r\n    SBOX[4][63488] = 0x40080; // f800 (1, 15) = 6\r\n    SBOX[4][65536] = 0x40000; // 10000 (2, 0) = 4\r\n    SBOX[4][69632] = 0x80; // 11000 (2, 1) = 2\r\n    SBOX[4][73728] = 0x20000000; // 12000 (2, 2) = 1\r\n    SBOX[4][77824] = 0x21000080; // 13000 (2, 3) = 11\r\n    SBOX[4][81920] = 0x1000080; // 14000 (2, 4) = 10\r\n    SBOX[4][86016] = 0x21040000; // 15000 (2, 5) = 13\r\n    SBOX[4][90112] = 0x20040080; // 16000 (2, 6) = 7\r\n    SBOX[4][94208] = 0x1000000; // 17000 (2, 7) = 8\r\n    SBOX[4][98304] = 0x21040080; // 18000 (2, 8) = 15\r\n    SBOX[4][102400] = 0x21000000; // 19000 (2, 9) = 9\r\n    SBOX[4][106496] = 0x1040000; // 1a000 (2, 10) = 12\r\n    SBOX[4][110592] = 0x20040000; // 1b000 (2, 11) = 5\r\n    SBOX[4][114688] = 0x40080; // 1c000 (2, 12) = 6\r\n    SBOX[4][118784] = 0x20000080; // 1d000 (2, 13) = 3\r\n    SBOX[4][122880] = 0x0; // 1e000 (2, 14) = 0\r\n    SBOX[4][126976] = 0x1040080; // 1f000 (2, 15) = 14\r\n    SBOX[4][67584] = 0x21000080; // 10800 (3, 0) = 11\r\n    SBOX[4][71680] = 0x1000000; // 11800 (3, 1) = 8\r\n    SBOX[4][75776] = 0x1040000; // 12800 (3, 2) = 12\r\n    SBOX[4][79872] = 0x20040080; // 13800 (3, 3) = 7\r\n    SBOX[4][83968] = 0x20000000; // 14800 (3, 4) = 1\r\n    SBOX[4][88064] = 0x1040080; // 15800 (3, 5) = 14\r\n    SBOX[4][92160] = 0x80; // 16800 (3, 6) = 2\r\n    SBOX[4][96256] = 0x21040000; // 17800 (3, 7) = 13\r\n    SBOX[4][100352] = 0x40080; // 18800 (3, 8) = 6\r\n    SBOX[4][104448] = 0x21040080; // 19800 (3, 9) = 15\r\n    SBOX[4][108544] = 0x0; // 1a800 (3, 10) = 0\r\n    SBOX[4][112640] = 0x21000000; // 1b800 (3, 11) = 9\r\n    SBOX[4][116736] = 0x1000080; // 1c800 (3, 12) = 10\r\n    SBOX[4][120832] = 0x40000; // 1d800 (3, 13) = 4\r\n    SBOX[4][124928] = 0x20040000; // 1e800 (3, 14) = 5\r\n    SBOX[4][129024] = 0x20000080; // 1f800 (3, 15) = 3\r\n\r\n    SBOX[5] = new Array();\r\n    SBOX[5][0] = 0x10000008; // 0 (0, 0) = 12\r\n    SBOX[5][256] = 0x2000; // 100 (0, 1) = 1\r\n    SBOX[5][512] = 0x10200000; // 200 (0, 2) = 10\r\n    SBOX[5][768] = 0x10202008; // 300 (0, 3) = 15\r\n    SBOX[5][1024] = 0x10002000; // 400 (0, 4) = 9\r\n    SBOX[5][1280] = 0x200000; // 500 (0, 5) = 2\r\n    SBOX[5][1536] = 0x200008; // 600 (0, 6) = 6\r\n    SBOX[5][1792] = 0x10000000; // 700 (0, 7) = 8\r\n    SBOX[5][2048] = 0x0; // 800 (0, 8) = 0\r\n    SBOX[5][2304] = 0x10002008; // 900 (0, 9) = 13\r\n    SBOX[5][2560] = 0x202000; // a00 (0, 10) = 3\r\n    SBOX[5][2816] = 0x8; // b00 (0, 11) = 4\r\n    SBOX[5][3072] = 0x10200008; // c00 (0, 12) = 14\r\n    SBOX[5][3328] = 0x202008; // d00 (0, 13) = 7\r\n    SBOX[5][3584] = 0x2008; // e00 (0, 14) = 5\r\n    SBOX[5][3840] = 0x10202000; // f00 (0, 15) = 11\r\n    SBOX[5][128] = 0x10200000; // 80 (1, 0) = 10\r\n    SBOX[5][384] = 0x10202008; // 180 (1, 1) = 15\r\n    SBOX[5][640] = 0x8; // 280 (1, 2) = 4\r\n    SBOX[5][896] = 0x200000; // 380 (1, 3) = 2\r\n    SBOX[5][1152] = 0x202008; // 480 (1, 4) = 7\r\n    SBOX[5][1408] = 0x10000008; // 580 (1, 5) = 12\r\n    SBOX[5][1664] = 0x10002000; // 680 (1, 6) = 9\r\n    SBOX[5][1920] = 0x2008; // 780 (1, 7) = 5\r\n    SBOX[5][2176] = 0x200008; // 880 (1, 8) = 6\r\n    SBOX[5][2432] = 0x2000; // 980 (1, 9) = 1\r\n    SBOX[5][2688] = 0x10002008; // a80 (1, 10) = 13\r\n    SBOX[5][2944] = 0x10200008; // b80 (1, 11) = 14\r\n    SBOX[5][3200] = 0x0; // c80 (1, 12) = 0\r\n    SBOX[5][3456] = 0x10202000; // d80 (1, 13) = 11\r\n    SBOX[5][3712] = 0x202000; // e80 (1, 14) = 3\r\n    SBOX[5][3968] = 0x10000000; // f80 (1, 15) = 8\r\n    SBOX[5][4096] = 0x10002000; // 1000 (2, 0) = 9\r\n    SBOX[5][4352] = 0x10200008; // 1100 (2, 1) = 14\r\n    SBOX[5][4608] = 0x10202008; // 1200 (2, 2) = 15\r\n    SBOX[5][4864] = 0x2008; // 1300 (2, 3) = 5\r\n    SBOX[5][5120] = 0x200000; // 1400 (2, 4) = 2\r\n    SBOX[5][5376] = 0x10000000; // 1500 (2, 5) = 8\r\n    SBOX[5][5632] = 0x10000008; // 1600 (2, 6) = 12\r\n    SBOX[5][5888] = 0x202000; // 1700 (2, 7) = 3\r\n    SBOX[5][6144] = 0x202008; // 1800 (2, 8) = 7\r\n    SBOX[5][6400] = 0x0; // 1900 (2, 9) = 0\r\n    SBOX[5][6656] = 0x8; // 1a00 (2, 10) = 4\r\n    SBOX[5][6912] = 0x10200000; // 1b00 (2, 11) = 10\r\n    SBOX[5][7168] = 0x2000; // 1c00 (2, 12) = 1\r\n    SBOX[5][7424] = 0x10002008; // 1d00 (2, 13) = 13\r\n    SBOX[5][7680] = 0x10202000; // 1e00 (2, 14) = 11\r\n    SBOX[5][7936] = 0x200008; // 1f00 (2, 15) = 6\r\n    SBOX[5][4224] = 0x8; // 1080 (3, 0) = 4\r\n    SBOX[5][4480] = 0x202000; // 1180 (3, 1) = 3\r\n    SBOX[5][4736] = 0x200000; // 1280 (3, 2) = 2\r\n    SBOX[5][4992] = 0x10000008; // 1380 (3, 3) = 12\r\n    SBOX[5][5248] = 0x10002000; // 1480 (3, 4) = 9\r\n    SBOX[5][5504] = 0x2008; // 1580 (3, 5) = 5\r\n    SBOX[5][5760] = 0x10202008; // 1680 (3, 6) = 15\r\n    SBOX[5][6016] = 0x10200000; // 1780 (3, 7) = 10\r\n    SBOX[5][6272] = 0x10202000; // 1880 (3, 8) = 11\r\n    SBOX[5][6528] = 0x10200008; // 1980 (3, 9) = 14\r\n    SBOX[5][6784] = 0x2000; // 1a80 (3, 10) = 1\r\n    SBOX[5][7040] = 0x202008; // 1b80 (3, 11) = 7\r\n    SBOX[5][7296] = 0x200008; // 1c80 (3, 12) = 6\r\n    SBOX[5][7552] = 0x0; // 1d80 (3, 13) = 0\r\n    SBOX[5][7808] = 0x10000000; // 1e80 (3, 14) = 8\r\n    SBOX[5][8064] = 0x10002008; // 1f80 (3, 15) = 13\r\n\r\n    SBOX[6] = new Array();\r\n    SBOX[6][0] = 0x100000; // 0 (0, 0) = 4\r\n    SBOX[6][16] = 0x2000401; // 10 (0, 1) = 11\r\n    SBOX[6][32] = 0x400; // 20 (0, 2) = 2\r\n    SBOX[6][48] = 0x100401; // 30 (0, 3) = 14\r\n    SBOX[6][64] = 0x2100401; // 40 (0, 4) = 15\r\n    SBOX[6][80] = 0x0; // 50 (0, 5) = 0\r\n    SBOX[6][96] = 0x1; // 60 (0, 6) = 8\r\n    SBOX[6][112] = 0x2100001; // 70 (0, 7) = 13\r\n    SBOX[6][128] = 0x2000400; // 80 (0, 8) = 3\r\n    SBOX[6][144] = 0x100001; // 90 (0, 9) = 12\r\n    SBOX[6][160] = 0x2000001; // a0 (0, 10) = 9\r\n    SBOX[6][176] = 0x2100400; // b0 (0, 11) = 7\r\n    SBOX[6][192] = 0x2100000; // c0 (0, 12) = 5\r\n    SBOX[6][208] = 0x401; // d0 (0, 13) = 10\r\n    SBOX[6][224] = 0x100400; // e0 (0, 14) = 6\r\n    SBOX[6][240] = 0x2000000; // f0 (0, 15) = 1\r\n    SBOX[6][8] = 0x2100001; // 8 (1, 0) = 13\r\n    SBOX[6][24] = 0x0; // 18 (1, 1) = 0\r\n    SBOX[6][40] = 0x2000401; // 28 (1, 2) = 11\r\n    SBOX[6][56] = 0x2100400; // 38 (1, 3) = 7\r\n    SBOX[6][72] = 0x100000; // 48 (1, 4) = 4\r\n    SBOX[6][88] = 0x2000001; // 58 (1, 5) = 9\r\n    SBOX[6][104] = 0x2000000; // 68 (1, 6) = 1\r\n    SBOX[6][120] = 0x401; // 78 (1, 7) = 10\r\n    SBOX[6][136] = 0x100401; // 88 (1, 8) = 14\r\n    SBOX[6][152] = 0x2000400; // 98 (1, 9) = 3\r\n    SBOX[6][168] = 0x2100000; // a8 (1, 10) = 5\r\n    SBOX[6][184] = 0x100001; // b8 (1, 11) = 12\r\n    SBOX[6][200] = 0x400; // c8 (1, 12) = 2\r\n    SBOX[6][216] = 0x2100401; // d8 (1, 13) = 15\r\n    SBOX[6][232] = 0x1; // e8 (1, 14) = 8\r\n    SBOX[6][248] = 0x100400; // f8 (1, 15) = 6\r\n    SBOX[6][256] = 0x2000000; // 100 (2, 0) = 1\r\n    SBOX[6][272] = 0x100000; // 110 (2, 1) = 4\r\n    SBOX[6][288] = 0x2000401; // 120 (2, 2) = 11\r\n    SBOX[6][304] = 0x2100001; // 130 (2, 3) = 13\r\n    SBOX[6][320] = 0x100001; // 140 (2, 4) = 12\r\n    SBOX[6][336] = 0x2000400; // 150 (2, 5) = 3\r\n    SBOX[6][352] = 0x2100400; // 160 (2, 6) = 7\r\n    SBOX[6][368] = 0x100401; // 170 (2, 7) = 14\r\n    SBOX[6][384] = 0x401; // 180 (2, 8) = 10\r\n    SBOX[6][400] = 0x2100401; // 190 (2, 9) = 15\r\n    SBOX[6][416] = 0x100400; // 1a0 (2, 10) = 6\r\n    SBOX[6][432] = 0x1; // 1b0 (2, 11) = 8\r\n    SBOX[6][448] = 0x0; // 1c0 (2, 12) = 0\r\n    SBOX[6][464] = 0x2100000; // 1d0 (2, 13) = 5\r\n    SBOX[6][480] = 0x2000001; // 1e0 (2, 14) = 9\r\n    SBOX[6][496] = 0x400; // 1f0 (2, 15) = 2\r\n    SBOX[6][264] = 0x100400; // 108 (3, 0) = 6\r\n    SBOX[6][280] = 0x2000401; // 118 (3, 1) = 11\r\n    SBOX[6][296] = 0x2100001; // 128 (3, 2) = 13\r\n    SBOX[6][312] = 0x1; // 138 (3, 3) = 8\r\n    SBOX[6][328] = 0x2000000; // 148 (3, 4) = 1\r\n    SBOX[6][344] = 0x100000; // 158 (3, 5) = 4\r\n    SBOX[6][360] = 0x401; // 168 (3, 6) = 10\r\n    SBOX[6][376] = 0x2100400; // 178 (3, 7) = 7\r\n    SBOX[6][392] = 0x2000001; // 188 (3, 8) = 9\r\n    SBOX[6][408] = 0x2100000; // 198 (3, 9) = 5\r\n    SBOX[6][424] = 0x0; // 1a8 (3, 10) = 0\r\n    SBOX[6][440] = 0x2100401; // 1b8 (3, 11) = 15\r\n    SBOX[6][456] = 0x100401; // 1c8 (3, 12) = 14\r\n    SBOX[6][472] = 0x400; // 1d8 (3, 13) = 2\r\n    SBOX[6][488] = 0x2000400; // 1e8 (3, 14) = 3\r\n    SBOX[6][504] = 0x100001; // 1f8 (3, 15) = 12\r\n\r\n    SBOX[7] = new Array();\r\n    SBOX[7][0] = 0x8000820; // 0 (0, 0) = 13\r\n    SBOX[7][1] = 0x20000; // 1 (0, 1) = 2\r\n    SBOX[7][2] = 0x8000000; // 2 (0, 2) = 8\r\n    SBOX[7][3] = 0x20; // 3 (0, 3) = 4\r\n    SBOX[7][4] = 0x20020; // 4 (0, 4) = 6\r\n    SBOX[7][5] = 0x8020820; // 5 (0, 5) = 15\r\n    SBOX[7][6] = 0x8020800; // 6 (0, 6) = 11\r\n    SBOX[7][7] = 0x800; // 7 (0, 7) = 1\r\n    SBOX[7][8] = 0x8020000; // 8 (0, 8) = 10\r\n    SBOX[7][9] = 0x8000800; // 9 (0, 9) = 9\r\n    SBOX[7][10] = 0x20800; // a (0, 10) = 3\r\n    SBOX[7][11] = 0x8020020; // b (0, 11) = 14\r\n    SBOX[7][12] = 0x820; // c (0, 12) = 5\r\n    SBOX[7][13] = 0x0; // d (0, 13) = 0\r\n    SBOX[7][14] = 0x8000020; // e (0, 14) = 12\r\n    SBOX[7][15] = 0x20820; // f (0, 15) = 7\r\n    SBOX[7][-2147483648] = 0x800; // 80000000 (1, 0) = 1\r\n    SBOX[7][-2147483647] = 0x8020820; // 80000001 (1, 1) = 15\r\n    SBOX[7][-2147483646] = 0x8000820; // 80000002 (1, 2) = 13\r\n    SBOX[7][-2147483645] = 0x8000000; // 80000003 (1, 3) = 8\r\n    SBOX[7][-2147483644] = 0x8020000; // 80000004 (1, 4) = 10\r\n    SBOX[7][-2147483643] = 0x20800; // 80000005 (1, 5) = 3\r\n    SBOX[7][-2147483642] = 0x20820; // 80000006 (1, 6) = 7\r\n    SBOX[7][-2147483641] = 0x20; // 80000007 (1, 7) = 4\r\n    SBOX[7][-2147483640] = 0x8000020; // 80000008 (1, 8) = 12\r\n    SBOX[7][-2147483639] = 0x820; // 80000009 (1, 9) = 5\r\n    SBOX[7][-2147483638] = 0x20020; // 8000000a (1, 10) = 6\r\n    SBOX[7][-2147483637] = 0x8020800; // 8000000b (1, 11) = 11\r\n    SBOX[7][-2147483636] = 0x0; // 8000000c (1, 12) = 0\r\n    SBOX[7][-2147483635] = 0x8020020; // 8000000d (1, 13) = 14\r\n    SBOX[7][-2147483634] = 0x8000800; // 8000000e (1, 14) = 9\r\n    SBOX[7][-2147483633] = 0x20000; // 8000000f (1, 15) = 2\r\n    SBOX[7][16] = 0x20820; // 10 (2, 0) = 7\r\n    SBOX[7][17] = 0x8020800; // 11 (2, 1) = 11\r\n    SBOX[7][18] = 0x20; // 12 (2, 2) = 4\r\n    SBOX[7][19] = 0x800; // 13 (2, 3) = 1\r\n    SBOX[7][20] = 0x8000800; // 14 (2, 4) = 9\r\n    SBOX[7][21] = 0x8000020; // 15 (2, 5) = 12\r\n    SBOX[7][22] = 0x8020020; // 16 (2, 6) = 14\r\n    SBOX[7][23] = 0x20000; // 17 (2, 7) = 2\r\n    SBOX[7][24] = 0x0; // 18 (2, 8) = 0\r\n    SBOX[7][25] = 0x20020; // 19 (2, 9) = 6\r\n    SBOX[7][26] = 0x8020000; // 1a (2, 10) = 10\r\n    SBOX[7][27] = 0x8000820; // 1b (2, 11) = 13\r\n    SBOX[7][28] = 0x8020820; // 1c (2, 12) = 15\r\n    SBOX[7][29] = 0x20800; // 1d (2, 13) = 3\r\n    SBOX[7][30] = 0x820; // 1e (2, 14) = 5\r\n    SBOX[7][31] = 0x8000000; // 1f (2, 15) = 8\r\n    SBOX[7][-2147483632] = 0x20000; // 80000010 (3, 0) = 2\r\n    SBOX[7][-2147483631] = 0x800; // 80000011 (3, 1) = 1\r\n    SBOX[7][-2147483630] = 0x8020020; // 80000012 (3, 2) = 14\r\n    SBOX[7][-2147483629] = 0x20820; // 80000013 (3, 3) = 7\r\n    SBOX[7][-2147483628] = 0x20; // 80000014 (3, 4) = 4\r\n    SBOX[7][-2147483627] = 0x8020000; // 80000015 (3, 5) = 10\r\n    SBOX[7][-2147483626] = 0x8000000; // 80000016 (3, 6) = 8\r\n    SBOX[7][-2147483625] = 0x8000820; // 80000017 (3, 7) = 13\r\n    SBOX[7][-2147483624] = 0x8020820; // 80000018 (3, 8) = 15\r\n    SBOX[7][-2147483623] = 0x8000020; // 80000019 (3, 9) = 12\r\n    SBOX[7][-2147483622] = 0x8000800; // 8000001a (3, 10) = 9\r\n    SBOX[7][-2147483621] = 0x0; // 8000001b (3, 11) = 0\r\n    SBOX[7][-2147483620] = 0x20800; // 8000001c (3, 12) = 3\r\n    SBOX[7][-2147483619] = 0x820; // 8000001d (3, 13) = 5\r\n    SBOX[7][-2147483618] = 0x20020; // 8000001e (3, 14) = 6\r\n    SBOX[7][-2147483617] = 0x8020800; // 8000001f (3, 15) = 11\r\n\r\n    State.prototype._exchangeLR = function(v, m) {\r\n        var t = ((this.lhs >> v) ^ this.rhs) & m;\r\n        this.rhs ^= t;\r\n        this.lhs ^= (t << v);\r\n    };\r\n\r\n    State.prototype._exchangeRL = function(v, m) {\r\n        var t = ((this.rhs >> v) ^ this.lhs) & m;\r\n        this.lhs ^= t;\r\n        this.rhs ^= (t << v);\r\n    };\r\n\r\n    /**\r\n     * Perform the initial permutation of the input to create the starting state\r\n     * of the algorithm. The initial permutation maps each consecutive bit of\r\n     * the input into a different byte of the state.\r\n     * \r\n     * <pre>\r\n     * The initial permutation is defined to be:\r\n     * \r\n     *      58    50   42    34    26   18    10    2  \r\n     *      60    52   44    36    28   20    12    4\r\n     *      62    54   46    38    30   22    14    6\r\n     *      64    56   48    40    32   24    16    8\r\n     *      57    49   41    33    25   17     9    1\r\n     *      59    51   43    35    27   19    11    3\r\n     *      61    53   45    37    29   21    13    5\r\n     *      63    55   47    39    31   23    15    7\r\n     * </pre>\r\n     * \r\n     * \r\n     * @param message\r\n     *            The message as an array of unsigned bytes.\r\n     * @param offset\r\n     *            The offset into the message that the current 64-bit block\r\n     *            begins.\r\n     * @returns the initial engine state\r\n     */\r\n    State.prototype.initialPerm = function(message, offset) {\r\n        var input = message.slice(offset, offset + 8);\r\n\r\n        this.lhs = (input[0] << 24) + (input[1] << 16) + (input[2] << 8)\r\n                + input[3];\r\n        this.rhs = (input[4] << 24) + (input[5] << 16) + (input[6] << 8)\r\n                + input[7];\r\n\r\n        this._exchangeLR(4, 0x0f0f0f0f);\r\n        this._exchangeLR(16, 0x0000ffff);\r\n        this._exchangeRL(2, 0x33333333);\r\n        this._exchangeRL(8, 0x00ff00ff);\r\n        this._exchangeLR(1, 0x55555555);\r\n    };\r\n\r\n    /**\r\n     * Perform one round of the DES algorithm using the given key. A round is\r\n     * defined as:\r\n     * \r\n     * <pre>\r\n     * L&amp;rsquo = R\r\n     * R&amp;rsquo = L &circ; f(R, k)\r\n     * </pre>\r\n     * \r\n     * where f consists of expanding, XORing with the key and contracting back\r\n     * with the SBOXes.\r\n     * \r\n     * Note that the final round is defined slightly differently as:\r\n     * \r\n     * <pre>\r\n     * L&amp;rsquo = L &circ; f(R, k)\r\n     * R&amp;rsquo = R\r\n     * </pre>\r\n     * \r\n     * Therefore in the final round this function produces LHS and RHS the wrong\r\n     * way around.\r\n     * \r\n     * @param k\r\n     *            the key\r\n     */\r\n    State.prototype.round = function(k) {\r\n        var r = this.rhs, l = this.lhs;\r\n        var f = 0;\r\n        for ( var i = 0; i < 8; i++) {\r\n            var v = (r ^ k[i]) & State.SBOX_MASK[i];\r\n            f += State.SBOX[i][v];\r\n        }\r\n\r\n        this.lhs = r;\r\n        this.rhs = l ^ f;\r\n    };\r\n\r\n    /**\r\n     * Apply the inverse of the initial permutation.\r\n     * \r\n     * <pre>\r\n     * The inverse is defined to be:\r\n     * \r\n     *      40     8   48    16    56   24    64   32\r\n     *      39     7   47    15    55   23    63   31\r\n     *      38     6   46    14    54   22    62   30\r\n     *      37     5   45    13    53   21    61   29\r\n     *      36     4   44    12    52   20    60   28\r\n     *      35     3   43    11    51   19    59   27\r\n     *      34     2   42    10    50   18    58   26\r\n     *      33     1   41     9    49   17    57   25\r\n     * </pre>\r\n     * \r\n     * @param cipherText\r\n     * @param offset\r\n     */\r\n    State.prototype.finalPerm = function(cipherText, offset) {\r\n        var t = this.lhs;\r\n        this.lhs = this.rhs;\r\n        this.rhs = t;\r\n\r\n        this._exchangeLR(1, 0x55555555);\r\n        this._exchangeRL(8, 0x00ff00ff);\r\n        this._exchangeRL(2, 0x33333333);\r\n        this._exchangeLR(16, 0x0000ffff);\r\n        this._exchangeLR(4, 0x0f0f0f0f);\r\n\r\n        cipherText[offset] = (this.lhs >> 24) & 0xff;\r\n        cipherText[offset + 1] = (this.lhs >> 16) & 0xff;\r\n        cipherText[offset + 2] = (this.lhs >> 8) & 0xff;\r\n        cipherText[offset + 3] = (this.lhs) & 0xff;\r\n        cipherText[offset + 4] = (this.rhs >> 24) & 0xff;\r\n        cipherText[offset + 5] = (this.rhs >> 16) & 0xff;\r\n        cipherText[offset + 6] = (this.rhs >> 8) & 0xff;\r\n        cipherText[offset + 7] = (this.rhs) & 0xff;\r\n    };\r\n\r\n    /**\r\n     * DES cipher\r\n     */\r\n    var DES = C.DES = {\r\n        _blocksize : 2,\r\n\r\n        _keyschedule : null,\r\n\r\n        _state : new State(),\r\n\r\n        _init : function(k) {\r\n            this._keyschedule = new KeySchedule(k);\r\n        },\r\n\r\n        encrypt : function(message, password, options) {\r\n\r\n            options = options || {};\r\n\r\n            // Determine mode\r\n            var mode = options.mode || new C.mode.OFB;\r\n\r\n            // Allow mode to override options\r\n            if (mode.fixOptions)\r\n                mode.fixOptions(options);\r\n\r\n            var\r\n            // Convert to bytes if message is a string\r\n            m = (message.constructor == String ? UTF8.stringToBytes(message)\r\n                    : message),\r\n\r\n            // Generate random IV\r\n            iv = options.iv || util.randomBytes(8),\r\n\r\n            // Generate key\r\n            k = (password.constructor == String ?\r\n            // Derive key from passphrase\r\n            C.PBKDF2(password, iv, 8, {\r\n                asBytes : true\r\n            }) :\r\n            // else, assume byte array representing cryptographic key\r\n            password);\r\n\r\n            // Create key schedule\r\n            this._keyschedule = new KeySchedule(k);\r\n\r\n            // Encrypt\r\n            mode.encrypt(DES, m, iv);\r\n\r\n            // Return ciphertext\r\n            m = options.iv ? m : iv.concat(m);\r\n            return (options && options.asBytes) ? m : util.bytesToBase64(m);\r\n        },\r\n\r\n        _encryptblock : function(message, offset) {\r\n            this._state.initialPerm(message, offset);\r\n            for ( var i = 0; i <= 15; i++) {\r\n                this._state.round(this._keyschedule.getKey(i));\r\n            }\r\n            this._state.finalPerm(message, offset);\r\n        },\r\n\r\n        decrypt : function(ciphertext, password, options) {\r\n            options = options || {};\r\n\r\n            // Determine mode\r\n            var mode = options.mode || new C.mode.OFB;\r\n\r\n            // Allow mode to override options\r\n            if (mode.fixOptions)\r\n                mode.fixOptions(options);\r\n\r\n            var\r\n\r\n            // Convert to bytes if ciphertext is a string\r\n            c = (ciphertext.constructor == String ? util\r\n                    .base64ToBytes(ciphertext) : ciphertext),\r\n\r\n            // Separate IV and message\r\n            iv = options.iv || c.splice(0, 8),\r\n\r\n            // Generate key\r\n            k = (password.constructor == String ?\r\n            // Derive key from passphrase\r\n            C.PBKDF2(password, iv, 32, {\r\n                asBytes : true\r\n            }) :\r\n            // else, assume byte array representing cryptographic key\r\n            password);\r\n\r\n            // Create key schedule\r\n            this._keyschedule = new KeySchedule(k);\r\n\r\n            mode.decrypt(DES, c, iv);\r\n\r\n            // Return plaintext\r\n            return (options && options.asBytes) ? c : UTF8.bytesToString(c);\r\n        },\r\n\r\n        _decryptblock : function(message, offset) {\r\n            this._state.initialPerm(message, offset);\r\n            for ( var i = 15; i >= 0; i--) {\r\n                this._state.round(this._keyschedule.getKey(i));\r\n            }\r\n            this._state.finalPerm(message, offset);\r\n        }\r\n\r\n    };\r\n})();\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,CAAC,YAAW;EAEZ,IAAIA,CAAC,GAAI,OAAOC,MAAP,KAAkB,WAAnB,GAAkCC,OAAO,CAAC,UAAD,CAAP,CAAoBC,MAAtD,GAA+DF,MAAM,CAACE,MAA9E,CAFY,CAIR;;EACA,IAAIC,IAAI,GAAGJ,CAAC,CAACI,IAAb;EAAA,IAAmBC,OAAO,GAAGL,CAAC,CAACK,OAA/B;EAAA,IAAwCC,IAAI,GAAGD,OAAO,CAACC,IAAvD;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,IAAIC,WAAJ;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,WAAW,GAAG,UAASC,GAAT,EAAc;IACxB;AACR;AACA;IACQ,KAAKC,IAAL,GAAY,IAAIC,KAAJ,CAAU,EAAV,CAAZ;;IACA,KAAKC,eAAL,CAAqBH,GAArB;EACH,CAND;EAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACID,WAAW,CAACK,WAAZ,GAA0B,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAClB,CADkB,EACf,CADe,EACZ,CADY,EACT,CADS,EACN,CADM,EACH,CADG,EACA,CADA,EACG,CADH,EACM,CADN,EACS,CADT,EACY,CADZ,EACe,CADf,EACkB,CADlB,EACqB,CADrB,EACwB,CADxB,EAC2B,CAD3B,EAC8B,CAD9B,EACiC,CADjC,EACoC,CADpC,EACuC,CADvC,EAC0C,CAD1C,EAC6C,CAD7C,EAElB,CAFkB,EAEf,CAFe,EAEZ,CAFY,EAET,CAFS,EAEN,CAFM,EAEH,CAFG,EAEA,CAFA,EAEG,CAFH,EAEM,CAFN,EAES,CAFT,EAEY,CAFZ,EAEe,CAFf,EAEkB,CAFlB,EAEqB,CAFrB,EAEwB,CAFxB,EAE2B,CAF3B,EAE8B,CAF9B,EAEiC,CAFjC,CAA1B;EAIA;AACJ;AACA;AACA;AACA;AACA;;EACIL,WAAW,CAACM,SAAZ,GAAwB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,GAArC,EAA0C,EAA1C,EAA8C,EAA9C,EAChB,EADgB,EACZ,EADY,EACR,EADQ,EACJ,EADI,EACA,EADA,EACI,EADJ,EACQ,EADR,EACY,EADZ,EACgB,EADhB,EACoB,EADpB,EACwB,EADxB,EAC4B,EAD5B,EACgC,EADhC,EACoC,EADpC,EACwC,EADxC,EAC4C,EAD5C,EACgD,EADhD,EAEhB,EAFgB,EAEZ,CAFY,EAET,CAFS,EAEN,CAFM,EAEH,CAFG,EAEA,CAFA,EAEG,CAFH,EAEM,CAFN,EAES,CAFT,EAEY,CAFZ,EAEe,CAFf,EAEkB,CAFlB,EAEqB,CAFrB,EAEwB,CAFxB,EAE2B,CAF3B,EAE8B,CAF9B,EAEiC,CAFjC,EAEoC,CAFpC,EAEuC,CAFvC,EAE0C,CAF1C,EAE6C,CAF7C,EAEgD,CAFhD,EAGhB,CAHgB,EAGb,CAHa,EAGV,CAHU,EAGP,EAHO,EAGH,EAHG,EAGC,EAHD,EAGK,EAHL,CAAxB;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIN,WAAW,CAACO,YAAZ,GAA2B,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EACnB,CADmB,EAChB,CADgB,EACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,CADL,EACQ,CADR,EACW,CADX,EACc,CADd,EACiB,CADjB,CAA3B;EAGA;AACJ;AACA;AACA;AACA;;EACIP,WAAW,CAACQ,YAAZ,GAA2B,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EACnB,CADmB,EAChB,CADgB,EACb,CADa,EACV,CADU,EACP,CADO,EACJ,CADI,EACD,CADC,EACE,CADF,EACK,CADL,EACQ,CADR,EACW,CADX,EACc,CADd,EACiB,CADjB,CAA3B;EAGA;AACJ;AACA;AACA;AACA;;EACIR,WAAW,CAACS,UAAZ,GAAyB,CAAE,CAAF,EAAK,CAAL,EAAQ,EAAR,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,EAA3C,EAA+C,CAA/C,EACjB,EADiB,EACb,EADa,EACT,CADS,EACN,EADM,EACF,CADE,EACC,CADD,EACI,CADJ,EACO,EADP,EACW,CADX,EACc,CADd,EACiB,CADjB,EACoB,CADpB,EACuB,EADvB,CAAzB;EAGA;AACJ;AACA;AACA;AACA;;EACIT,WAAW,CAACU,UAAZ,GAAyB,CAAE,CAAF,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,EAApC,EAAwC,EAAxC,EAA4C,EAA5C,EAAgD,CAAhD,EACjB,EADiB,EACb,CADa,EACV,EADU,EACN,CADM,EACH,CADG,EACA,EADA,EACI,CADJ,EACO,CADP,EACU,EADV,EACc,CADd,EACiB,CADjB,EACoB,CADpB,EACuB,CADvB,CAAzB;EAGA;AACJ;AACA;AACA;AACA;;EACIV,WAAW,CAACW,SAAZ,GAAwB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,EAChB,EADgB,EACZ,EADY,EACR,EADQ,CAAxB;;EAGAX,WAAW,CAACY,SAAZ,CAAsBR,eAAtB,GAAwC,UAASH,GAAT,EAAc;IAClD,IAAIY,CAAJ,CADkD,CAGlD;;IACA,IAAIC,IAAI,GAAG,IAAIX,KAAJ,CAAU,EAAV,CAAX;;IACA,KAAKU,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;MACrBC,IAAI,CAACD,CAAD,CAAJ,GAAU,CAACZ,GAAG,CAACD,WAAW,CAACK,WAAZ,CAAwBQ,CAAxB,CAAD,CAAH,GAAkCb,WAAW,CAACM,SAAZ,CAAsBO,CAAtB,CAAnC,KAAgE,CAA1E;IACH,CAPiD,CASlD;;;IACA,IAAIE,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,EAAd,CAAZ;IACA,IAAIC,KAAK,GAAGH,IAAI,CAACE,KAAL,CAAW,EAAX,EAAe,EAAf,CAAZ,CAXkD,CAalD;;IACAD,KAAK,GAAGA,KAAK,CAACG,MAAN,CAAaH,KAAb,CAAR;IACAE,KAAK,GAAGA,KAAK,CAACC,MAAN,CAAaD,KAAb,CAAR,CAfkD,CAiBlD;;IACA,KAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;MACrB,IAAIM,CAAC,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAR,CADqB,CAGrB;;MACA,IAAIC,CAAC,GAAGpB,WAAW,CAACW,SAAZ,CAAsBE,CAAtB,CAAR;;MACA,KAAM,IAAIQ,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;QAC1B,IAAIN,KAAK,CAACM,CAAC,GAAGD,CAAL,CAAT,EAAkB;UACdD,CAAC,CAACnB,WAAW,CAACO,YAAZ,CAAyBc,CAAzB,CAAD,CAAD,IAAkCrB,WAAW,CAACS,UAAZ,CAAuBY,CAAvB,CAAlC;QACH;;QACD,IAAIJ,KAAK,CAACI,CAAC,GAAGD,CAAL,CAAT,EAAkB;UACdD,CAAC,CAACnB,WAAW,CAACQ,YAAZ,CAAyBa,CAAzB,CAAD,CAAD,IAAkCrB,WAAW,CAACU,UAAZ,CAAuBW,CAAvB,CAAlC;QACH;MACJ,CAZoB,CAcrB;;;MACAF,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAACA,CAAC,CAAC,CAAD,CAAD,GAAO,IAAR,KAAiB,EAAlB,KAAyB,CAACA,CAAC,CAAC,CAAD,CAAD,GAAO,IAAR,KAAiB,CAA1C,CAAP;;MACA,KAAM,IAAIE,CAAC,GAAG,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,EAA1B,EAA8B;QAC1BF,CAAC,CAACE,CAAD,CAAD,GAAOF,CAAC,CAACE,CAAD,CAAD,IAAS,KAAK,IAAIA,CAAzB;MACH;;MACDF,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,CAACA,CAAC,CAAC,CAAD,CAAD,GAAO,IAAR,KAAiB,CAAlB,KAAwB,CAACA,CAAC,CAAC,CAAD,CAAD,GAAO,GAAR,KAAgB,EAAxC,CAAP;MACA,KAAKjB,IAAL,CAAUW,CAAV,IAAeM,CAAf;IACH;EACJ,CAxCD;EA0CA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACInB,WAAW,CAACY,SAAZ,CAAsBU,MAAtB,GAA+B,UAAST,CAAT,EAAY;IACvC,OAAO,KAAKX,IAAL,CAAUW,CAAV,CAAP;EACH,CAFD;EAIA;AACJ;AACA;AACA;AACA;;;EAEI,IAAIU,KAAJ;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,KAAK,GAAG,YAAW;IACf;IACA,KAAKC,GAAL,GAAW,CAAX;IACA;;IACA,KAAKC,GAAL,GAAW,CAAX;EACH,CALD;EAOA;AACJ;AACA;AACA;AACA;AACA;;;EACIF,KAAK,CAACG,SAAN,GAAkB,CAAE,UAAF,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,EACV,UADU,EACE,UADF,EACc,UADd,EAC0B,UAD1B,CAAlB;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIH,KAAK,CAACI,IAAN,GAAa,IAAIxB,KAAJ,CAAU,CAAV,CAAb;EAEA,IAAIwB,IAAI,GAAGJ,KAAK,CAACI,IAAjB;EAEAA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,QAAb,CAzOQ,CAyOe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CA1OQ,CA0OqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CA3OQ,CA2OuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CA5OQ,CA4OkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,KAAtB,CA7OQ,CA6OqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CA9OQ,CA8OwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CA/OQ,CA+OwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CAhPQ,CAgPwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CAjPQ,CAiPsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAlPQ,CAkPyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,MAAvB,CAnPQ,CAmPuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CApPQ,CAoPyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,MAAvB,CArPQ,CAqPuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,QAAtB,CAtPQ,CAsPwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,GAAtB,CAvPQ,CAuPmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,MAAtB,CAxPQ,CAwPsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CAzPQ,CAyPkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CA1PQ,CA0PuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CA3PQ,CA2PqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CA5PQ,CA4PqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CA7PQ,CA6PwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,KAAtB,CA9PQ,CA8PqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CA/PQ,CA+PwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,GAAtB,CAhQQ,CAgQmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAjQQ,CAiQyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,MAAvB,CAlQQ,CAkQuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAnQQ,CAmQyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CApQQ,CAoQyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,QAAtB,CArQQ,CAqQwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,MAAtB,CAtQQ,CAsQsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,KAAtB,CAvQQ,CAuQqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,QAAtB,CAxQQ,CAwQwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,MAAb,CAzQQ,CAyQa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CA1QQ,CA0QkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CA3QQ,CA2QuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CA5QQ,CA4QuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CA7QQ,CA6QwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,MAAtB,CA9QQ,CA8QsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,KAAtB,CA/QQ,CA+QqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CAhRQ,CAgRwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAjRQ,CAiRyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAlRQ,CAkRyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAnRQ,CAmRyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,MAAvB,CApRQ,CAoRuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CArRQ,CAqRsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,QAAtB,CAtRQ,CAsRwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,MAAtB,CAvRQ,CAuRsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,GAAtB,CAxRQ,CAwRmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CAzRQ,CAyRuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CA1RQ,CA0RuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,QAArB,CA3RQ,CA2RuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,KAArB,CA5RQ,CA4RoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,MAAtB,CA7RQ,CA6RsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,QAAtB,CA9RQ,CA8RwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,GAAtB,CA/RQ,CA+RmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,IAAsB,MAAtB,CAhSQ,CAgSsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,MAAvB,CAjSQ,CAiSuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CAlSQ,CAkSyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CAnSQ,CAmSsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,QAAvB,CApSQ,CAoSyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,QAAtB,CArSQ,CAqSwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,GAAtB,CAtSQ,CAsSmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,MAAtB,CAvSQ,CAuSsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,SAAT,IAAsB,QAAtB,CAxSQ,CAwSwB;;EAEhCA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,UAAb,CA3SQ,CA2SiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,MAApB,CA5SQ,CA4SoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA7SQ,CA6SqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,UAApB,CA9SQ,CA8SwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,UAApB,CA/SQ,CA+SwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,UAApB,CAhTQ,CAgTwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAjTQ,CAiTyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,IAArB,CAlTQ,CAkTmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAnTQ,CAmTsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CApTQ,CAoTyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CArTQ,CAqTyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAtTQ,CAsTsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAvTQ,CAuTsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CAxTQ,CAwTkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CAzTQ,CAyTqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA1TQ,CA0TyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CA3TQ,CA2TuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA5TQ,CA4TqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,IAApB,CA7TQ,CA6TkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,UAApB,CA9TQ,CA8TwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,UAApB,CA/TQ,CA+TwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,UAApB,CAhUQ,CAgUwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAjUQ,CAiUsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAlUQ,CAkUyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAnUQ,CAmUsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CApUQ,CAoUkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CArUQ,CAqUqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAtUQ,CAsUyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAvUQ,CAuUyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAxUQ,CAwUsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAzUQ,CAyUyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CA1UQ,CA0UqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CA3UQ,CA2UkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA5UQ,CA4UyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA7UQ,CA6UyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA9UQ,CA8UyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA/UQ,CA+UyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,IAArB,CAhVQ,CAgVmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAjVQ,CAiVsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CAlVQ,CAkVqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CAnVQ,CAmVqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CApVQ,CAoVsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CArVQ,CAqVsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAtVQ,CAsVyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAvVQ,CAuVsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAxVQ,CAwVyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAzVQ,CAyVyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA1VQ,CA0VyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CA3VQ,CA2VsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CA5VQ,CA4VsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA7VQ,CA6VyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CA9VQ,CA8VqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CA/VQ,CA+VyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAhWQ,CAgWyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,IAArB,CAjWQ,CAiWmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAlWQ,CAkWyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAnWQ,CAmWyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CApWQ,CAoWyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CArWQ,CAqWyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CAtWQ,CAsWsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,GAArB,CAvWQ,CAuWkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,MAArB,CAxWQ,CAwWqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,UAArB,CAzWQ,CAyWyB;;EACjCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,SAAR,IAAqB,OAArB,CA1WQ,CA0WsB;;EAE9BA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,KAAb,CA7WQ,CA6WY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,GAAnB,CA9WQ,CA8WgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CA/WQ,CA+WsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,OAAnB,CAhXQ,CAgXoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,OAAnB,CAjXQ,CAiXoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CAlXQ,CAkXsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CAnXQ,CAmXsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CApXQ,CAoXsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CArXQ,CAqXsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CAtXQ,CAsXsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAvXQ,CAuXqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAxXQ,CAwXuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAzXQ,CAyXuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA1XQ,CA0XqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,GAApB,CA3XQ,CA2XiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,KAApB,CA5XQ,CA4XmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,SAAlB,CA7XQ,CA6XqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CA9XQ,CA8XsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,GAAnB,CA/XQ,CA+XgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CAhYQ,CAgYsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,SAAnB,CAjYQ,CAiYsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,OAAnB,CAlYQ,CAkYoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,OAAnB,CAnYQ,CAmYoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,KAAnB,CApYQ,CAoYkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,GAAnB,CArYQ,CAqYgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,KAAnB,CAtYQ,CAsYkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAvYQ,CAuYuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAxYQ,CAwYqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAzYQ,CAyYqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA1YQ,CA0YuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA3YQ,CA2YuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA5YQ,CA4YuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA7YQ,CA6YuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA9YQ,CA8YqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA/YQ,CA+YqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAhZQ,CAgZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,KAApB,CAjZQ,CAiZmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAlZQ,CAkZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAnZQ,CAmZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,GAApB,CApZQ,CAoZiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CArZQ,CAqZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAtZQ,CAsZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,GAApB,CAvZQ,CAuZiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAxZQ,CAwZqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAzZQ,CAyZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,KAApB,CA1ZQ,CA0ZmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA3ZQ,CA2ZqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA5ZQ,CA4ZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA7ZQ,CA6ZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,KAApB,CA9ZQ,CA8ZmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA/ZQ,CA+ZuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,GAApB,CAhaQ,CAgaiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAjaQ,CAiaqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAlaQ,CAkauB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,KAApB,CAnaQ,CAmamB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CApaQ,CAoauB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAraQ,CAqaqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAtaQ,CAsauB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CAvaQ,CAuaqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAxaQ,CAwauB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CAzaQ,CAyauB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,SAApB,CA1aQ,CA0auB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,GAApB,CA3aQ,CA2aiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,IAAoB,OAApB,CA5aQ,CA4aqB;;EAE7BA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,UAAb,CA/aQ,CA+aiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAhbQ,CAgbqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CAjbQ,CAiboB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAlbQ,CAkbsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,GAAlB,CAnbQ,CAmbe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CApbQ,CAoboB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CArbQ,CAqbsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CAtbQ,CAsboB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAvbQ,CAubsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CAxbQ,CAwboB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,IAAlB,CAzbQ,CAybgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA1bQ,CA0bsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA3bQ,CA2bsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,MAAlB,CA5bQ,CA4bkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,MAAlB,CA7bQ,CA6bkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA9bQ,CA8bsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA/bQ,CA+bqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,IAAjB,CAhcQ,CAgce;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAjcQ,CAicsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAlcQ,CAkcsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CAncQ,CAmcoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CApcQ,CAocsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,GAAlB,CArcQ,CAqce;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAtcQ,CAscsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,MAAlB,CAvcQ,CAuckB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAxcQ,CAwcsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CAzcQ,CAycoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,MAAlB,CA1cQ,CA0ckB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA3cQ,CA2csB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CA5cQ,CA4coB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,QAAlB,CA7cQ,CA6coB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CA9cQ,CA8cuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CA/cQ,CA+cqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CAhdQ,CAgdqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAjdQ,CAiduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,GAAnB,CAldQ,CAkdgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,MAAnB,CAndQ,CAmdmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CApdQ,CAoduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CArdQ,CAqduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAtdQ,CAsduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAvdQ,CAuduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAxdQ,CAwduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAzdQ,CAyduB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CA1dQ,CA0dqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CA3dQ,CA2duB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CA5dQ,CA4dqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,IAAnB,CA7dQ,CA6diB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,MAAnB,CA9dQ,CA8dmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CA/dQ,CA+duB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAheQ,CAgeuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,GAAnB,CAjeQ,CAiegB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CAleQ,CAkeqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CAneQ,CAmeqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CApeQ,CAoeuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAreQ,CAqeuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,IAAnB,CAteQ,CAseiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAveQ,CAueuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,MAAnB,CAxeQ,CAwemB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CAzeQ,CAyeuB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CA1eQ,CA0euB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,MAAnB,CA3eQ,CA2emB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,UAAnB,CA5eQ,CA4euB;;EAC/BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CA7eQ,CA6eqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,OAAR,IAAmB,QAAnB,CA9eQ,CA8eqB;;EAE7BA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,IAAb,CAjfQ,CAifW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,SAAhB,CAlfQ,CAkfmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,OAAhB,CAnfQ,CAmfiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CApfQ,CAofqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CArfQ,CAqfqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CAtfQ,CAsfoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAvfQ,CAufqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,OAAjB,CAxfQ,CAwfkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CAzfQ,CAyfoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA1fQ,CA0fqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA3fQ,CA2fqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA5fQ,CA4fqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA7fQ,CA6fqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,GAAjB,CA9fQ,CA8fc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CA/fQ,CA+foB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAhgBQ,CAggBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,SAAhB,CAjgBQ,CAigBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAlgBQ,CAkgBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,IAAjB,CAngBQ,CAmgBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CApgBQ,CAogBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,OAAjB,CArgBQ,CAqgBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAtgBQ,CAsgBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAvgBQ,CAugBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAxgBQ,CAwgBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAzgBQ,CAygBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,GAAjB,CA1gBQ,CA0gBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA3gBQ,CA2gBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CA5gBQ,CA4gBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA7gBQ,CA6gBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CA9gBQ,CA8gBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CA/gBQ,CA+gBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,OAAjB,CAhhBQ,CAghBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,OAAjB,CAjhBQ,CAihBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,IAAjB,CAlhBQ,CAkhBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAnhBQ,CAmhBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAphBQ,CAohBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CArhBQ,CAqhBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAthBQ,CAshBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAvhBQ,CAuhBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CAxhBQ,CAwhBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAzhBQ,CAyhBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA1hBQ,CA0hBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,SAAlB,CA3hBQ,CA2hBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA5hBQ,CA4hBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,OAAlB,CA7hBQ,CA6hBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA9hBQ,CA8hBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,GAAlB,CA/hBQ,CA+hBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,SAAlB,CAhiBQ,CAgiBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAjiBQ,CAiiBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CAliBQ,CAkiBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CAniBQ,CAmiBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CApiBQ,CAoiBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAriBQ,CAqiBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,SAAjB,CAtiBQ,CAsiBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,IAAjB,CAviBQ,CAuiBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,IAAiB,UAAjB,CAxiBQ,CAwiBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,OAAlB,CAziBQ,CAyiBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA1iBQ,CA0iBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,GAAlB,CA3iBQ,CA2iBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA5iBQ,CA4iBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,SAAlB,CA7iBQ,CA6iBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,OAAlB,CA9iBQ,CA8iBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CA/iBQ,CA+iBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,IAAkB,UAAlB,CAhjBQ,CAgjBsB;;EAE9BA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,UAAb,CAnjBQ,CAmjBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,MAAf,CApjBQ,CAojBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,UAAf,CArjBQ,CAqjBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,UAAf,CAtjBQ,CAsjBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAvjBQ,CAujBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAxjBQ,CAwjBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAzjBQ,CAyjBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA1jBQ,CA0jBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CA3jBQ,CA2jBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA5jBQ,CA4jBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CA7jBQ,CA6jBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CA9jBQ,CA8jBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA/jBQ,CA+jBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAhkBQ,CAgkBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CAjkBQ,CAikBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAlkBQ,CAkkBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,UAAf,CAnkBQ,CAmkBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,UAAf,CApkBQ,CAokBmB;;EAC3BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,GAAf,CArkBQ,CAqkBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAtkBQ,CAskBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAvkBQ,CAukBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAxkBQ,CAwkBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAzkBQ,CAykBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CA1kBQ,CA0kBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CA3kBQ,CA2kBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CA5kBQ,CA4kBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA7kBQ,CA6kBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA9kBQ,CA8kBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CA/kBQ,CA+kBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAhlBQ,CAglBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAjlBQ,CAilBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAllBQ,CAklBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAnlBQ,CAmlBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAplBQ,CAolBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CArlBQ,CAqlBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CAtlBQ,CAslBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAvlBQ,CAulBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAxlBQ,CAwlBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAzlBQ,CAylBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CA1lBQ,CA0lBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CA3lBQ,CA2lBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CA5lBQ,CA4lBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CA7lBQ,CA6lBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA9lBQ,CA8lBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CA/lBQ,CA+lBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAhmBQ,CAgmBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAjmBQ,CAimBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CAlmBQ,CAkmBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CAnmBQ,CAmmBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CApmBQ,CAomBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CArmBQ,CAqmBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAtmBQ,CAsmBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAvmBQ,CAumBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CAxmBQ,CAwmBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAzmBQ,CAymBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA1mBQ,CA0mBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA3mBQ,CA2mBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CA5mBQ,CA4mBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,MAAhB,CA7mBQ,CA6mBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CA9mBQ,CA8mBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,QAAhB,CA/mBQ,CA+mBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,GAAhB,CAhnBQ,CAgnBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAjnBQ,CAinBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,IAAgB,UAAhB,CAlnBQ,CAknBoB;;EAE5BA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,QAAb,CArnBQ,CAqnBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAtnBQ,CAsnBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,KAAd,CAvnBQ,CAunBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,QAAd,CAxnBQ,CAwnBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAznBQ,CAynBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,GAAd,CA1nBQ,CA0nBW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,GAAd,CA3nBQ,CA2nBW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA5nBQ,CA4nBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA7nBQ,CA6nBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CA9nBQ,CA8nBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA/nBQ,CA+nBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAhoBQ,CAgoBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAjoBQ,CAioBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CAloBQ,CAkoBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAnoBQ,CAmoBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CApoBQ,CAooBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CAroBQ,CAqoBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,GAAd,CAtoBQ,CAsoBW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAvoBQ,CAuoBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAxoBQ,CAwoBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,QAAd,CAzoBQ,CAyoBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CA1oBQ,CA0oBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA3oBQ,CA2oBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CA5oBQ,CA4oBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CA7oBQ,CA6oBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA9oBQ,CA8oBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA/oBQ,CA+oBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAhpBQ,CAgpBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CAjpBQ,CAipBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAlpBQ,CAkpBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,GAAf,CAnpBQ,CAmpBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAppBQ,CAopBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CArpBQ,CAqpBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAtpBQ,CAspBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAvpBQ,CAupBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAxpBQ,CAwpBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAzpBQ,CAypBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA1pBQ,CA0pBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA3pBQ,CA2pBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CA5pBQ,CA4pBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CA7pBQ,CA6pBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA9pBQ,CA8pBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CA/pBQ,CA+pBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,GAAf,CAhqBQ,CAgqBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,GAAf,CAjqBQ,CAiqBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAlqBQ,CAkqBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAnqBQ,CAmqBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CApqBQ,CAoqBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CArqBQ,CAqqBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAtqBQ,CAsqBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAvqBQ,CAuqBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,GAAf,CAxqBQ,CAwqBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAzqBQ,CAyqBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CA1qBQ,CA0qBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CA3qBQ,CA2qBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA5qBQ,CA4qBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA7qBQ,CA6qBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CA9qBQ,CA8qBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,GAAf,CA/qBQ,CA+qBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAhrBQ,CAgrBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAjrBQ,CAirBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,KAAf,CAlrBQ,CAkrBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,SAAf,CAnrBQ,CAmrBkB;;EAC1BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAe,QAAf,CAprBQ,CAorBiB;;EAEzBA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAIxB,KAAJ,EAAV;EACAwB,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CAvrBQ,CAurBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,OAAb,CAxrBQ,CAwrBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CAzrBQ,CAyrBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,IAAb,CA1rBQ,CA0rBW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,OAAb,CA3rBQ,CA2rBc;;EACtBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CA5rBQ,CA4rBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CA7rBQ,CA6rBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,KAAb,CA9rBQ,CA8rBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CA/rBQ,CA+rBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,IAAa,SAAb,CAhsBQ,CAgsBgB;;EACxBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,OAAd,CAjsBQ,CAisBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAlsBQ,CAksBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,KAAd,CAnsBQ,CAmsBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,GAAd,CApsBQ,CAosBW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CArsBQ,CAqsBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,OAAd,CAtsBQ,CAssBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CAvsBQ,CAusBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAxsBQ,CAwsB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAzsBQ,CAysB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA1sBQ,CA0sB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA3sBQ,CA2sB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CA5sBQ,CA4sBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CA7sBQ,CA6sBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,IAAvB,CA9sBQ,CA8sBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA/sBQ,CA+sB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CAhtBQ,CAgtBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CAjtBQ,CAitBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAltBQ,CAktB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,GAAvB,CAntBQ,CAmtBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAptBQ,CAotB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CArtBQ,CAqtB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CAttBQ,CAstBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,OAAd,CAvtBQ,CAutBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAxtBQ,CAwtBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,IAAd,CAztBQ,CAytBY;;EACpBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,KAAd,CA1tBQ,CA0tBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CA3tBQ,CA2tBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CA5tBQ,CA4tBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CA7tBQ,CA6tBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,OAAd,CA9tBQ,CA8tBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,GAAd,CA/tBQ,CA+tBW;;EACnBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,OAAd,CAhuBQ,CAguBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAjuBQ,CAiuBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAluBQ,CAkuBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAnuBQ,CAmuBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,OAAd,CApuBQ,CAouBe;;EACvBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,KAAd,CAruBQ,CAquBa;;EACrBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,EAAR,IAAc,SAAd,CAtuBQ,CAsuBiB;;EACzBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CAvuBQ,CAuuBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CAxuBQ,CAwuBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAzuBQ,CAyuB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CA1uBQ,CA0uBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,IAAvB,CA3uBQ,CA2uBqB;;EAC7BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA5uBQ,CA4uB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA7uBQ,CA6uB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA9uBQ,CA8uB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CA/uBQ,CA+uB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAhvBQ,CAgvB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAjvBQ,CAivB0B;;EAClCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,GAAvB,CAlvBQ,CAkvBoB;;EAC5BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CAnvBQ,CAmvBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,KAAvB,CApvBQ,CAovBsB;;EAC9BA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,OAAvB,CArvBQ,CAqvBwB;;EAChCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAC,UAAT,IAAuB,SAAvB,CAtvBQ,CAsvB0B;;EAElCJ,KAAK,CAACX,SAAN,CAAgBgB,WAAhB,GAA8B,UAASC,CAAT,EAAYC,CAAZ,EAAe;IACzC,IAAIC,CAAC,GAAG,CAAE,KAAKP,GAAL,IAAYK,CAAb,GAAkB,KAAKJ,GAAxB,IAA+BK,CAAvC;IACA,KAAKL,GAAL,IAAYM,CAAZ;IACA,KAAKP,GAAL,IAAaO,CAAC,IAAIF,CAAlB;EACH,CAJD;;EAMAN,KAAK,CAACX,SAAN,CAAgBoB,WAAhB,GAA8B,UAASH,CAAT,EAAYC,CAAZ,EAAe;IACzC,IAAIC,CAAC,GAAG,CAAE,KAAKN,GAAL,IAAYI,CAAb,GAAkB,KAAKL,GAAxB,IAA+BM,CAAvC;IACA,KAAKN,GAAL,IAAYO,CAAZ;IACA,KAAKN,GAAL,IAAaM,CAAC,IAAIF,CAAlB;EACH,CAJD;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIN,KAAK,CAACX,SAAN,CAAgBqB,WAAhB,GAA8B,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;IACpD,IAAIC,KAAK,GAAGF,OAAO,CAAClB,KAAR,CAAcmB,MAAd,EAAsBA,MAAM,GAAG,CAA/B,CAAZ;IAEA,KAAKX,GAAL,GAAW,CAACY,KAAK,CAAC,CAAD,CAAL,IAAY,EAAb,KAAoBA,KAAK,CAAC,CAAD,CAAL,IAAY,EAAhC,KAAuCA,KAAK,CAAC,CAAD,CAAL,IAAY,CAAnD,IACDA,KAAK,CAAC,CAAD,CADf;IAEA,KAAKX,GAAL,GAAW,CAACW,KAAK,CAAC,CAAD,CAAL,IAAY,EAAb,KAAoBA,KAAK,CAAC,CAAD,CAAL,IAAY,EAAhC,KAAuCA,KAAK,CAAC,CAAD,CAAL,IAAY,CAAnD,IACDA,KAAK,CAAC,CAAD,CADf;;IAGA,KAAKR,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IACA,KAAKA,WAAL,CAAiB,EAAjB,EAAqB,UAArB;;IACA,KAAKI,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IACA,KAAKA,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IACA,KAAKJ,WAAL,CAAiB,CAAjB,EAAoB,UAApB;EACH,CAbD;EAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIL,KAAK,CAACX,SAAN,CAAgByB,KAAhB,GAAwB,UAASlB,CAAT,EAAY;IAChC,IAAImB,CAAC,GAAG,KAAKb,GAAb;IAAA,IAAkBc,CAAC,GAAG,KAAKf,GAA3B;IACA,IAAIgB,CAAC,GAAG,CAAR;;IACA,KAAM,IAAI3B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;MACzB,IAAIgB,CAAC,GAAG,CAACS,CAAC,GAAGnB,CAAC,CAACN,CAAD,CAAN,IAAaU,KAAK,CAACG,SAAN,CAAgBb,CAAhB,CAArB;MACA2B,CAAC,IAAIjB,KAAK,CAACI,IAAN,CAAWd,CAAX,EAAcgB,CAAd,CAAL;IACH;;IAED,KAAKL,GAAL,GAAWc,CAAX;IACA,KAAKb,GAAL,GAAWc,CAAC,GAAGC,CAAf;EACH,CAVD;EAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIjB,KAAK,CAACX,SAAN,CAAgB6B,SAAhB,GAA4B,UAASC,UAAT,EAAqBP,MAArB,EAA6B;IACrD,IAAIJ,CAAC,GAAG,KAAKP,GAAb;IACA,KAAKA,GAAL,GAAW,KAAKC,GAAhB;IACA,KAAKA,GAAL,GAAWM,CAAX;;IAEA,KAAKH,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IACA,KAAKI,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IACA,KAAKA,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IACA,KAAKJ,WAAL,CAAiB,EAAjB,EAAqB,UAArB;;IACA,KAAKA,WAAL,CAAiB,CAAjB,EAAoB,UAApB;;IAEAc,UAAU,CAACP,MAAD,CAAV,GAAsB,KAAKX,GAAL,IAAY,EAAb,GAAmB,IAAxC;IACAkB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKX,GAAL,IAAY,EAAb,GAAmB,IAA5C;IACAkB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKX,GAAL,IAAY,CAAb,GAAkB,IAA3C;IACAkB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKX,GAAN,GAAa,IAAtC;IACAkB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKV,GAAL,IAAY,EAAb,GAAmB,IAA5C;IACAiB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKV,GAAL,IAAY,EAAb,GAAmB,IAA5C;IACAiB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKV,GAAL,IAAY,CAAb,GAAkB,IAA3C;IACAiB,UAAU,CAACP,MAAM,GAAG,CAAV,CAAV,GAA0B,KAAKV,GAAN,GAAa,IAAtC;EACH,CAnBD;EAqBA;AACJ;AACA;;;EACI,IAAIkB,GAAG,GAAGlD,CAAC,CAACkD,GAAF,GAAQ;IACdC,UAAU,EAAG,CADC;IAGdC,YAAY,EAAG,IAHD;IAKdC,MAAM,EAAG,IAAIvB,KAAJ,EALK;IAOdwB,KAAK,EAAG,UAAS5B,CAAT,EAAY;MAChB,KAAK0B,YAAL,GAAoB,IAAI7C,WAAJ,CAAgBmB,CAAhB,CAApB;IACH,CATa;IAWd6B,OAAO,EAAG,UAASd,OAAT,EAAkBe,QAAlB,EAA4BC,OAA5B,EAAqC;MAE3CA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAF2C,CAI3C;;MACA,IAAIC,IAAI,GAAGD,OAAO,CAACC,IAAR,IAAgB,IAAI1D,CAAC,CAAC0D,IAAF,CAAOC,GAAX,EAA3B,CAL2C,CAO3C;;MACA,IAAID,IAAI,CAACE,UAAT,EACIF,IAAI,CAACE,UAAL,CAAgBH,OAAhB;MAEJ,IACA;MACApB,CAAC,GAAII,OAAO,CAACoB,WAAR,IAAuBC,MAAvB,GAAgCxD,IAAI,CAACyD,aAAL,CAAmBtB,OAAnB,CAAhC,GACKA,OAHV;MAAA,IAKA;MACAuB,EAAE,GAAGP,OAAO,CAACO,EAAR,IAAc5D,IAAI,CAAC6D,WAAL,CAAiB,CAAjB,CANnB;MAAA,IAQA;MACAvC,CAAC,GAAI8B,QAAQ,CAACK,WAAT,IAAwBC,MAAxB,GACL;MACA9D,CAAC,CAACkE,MAAF,CAASV,QAAT,EAAmBQ,EAAnB,EAAuB,CAAvB,EAA0B;QACtBG,OAAO,EAAG;MADY,CAA1B,CAFK,GAKL;MACAX,QAfA,CAX2C,CA4B3C;;MACA,KAAKJ,YAAL,GAAoB,IAAI7C,WAAJ,CAAgBmB,CAAhB,CAApB,CA7B2C,CA+B3C;;MACAgC,IAAI,CAACH,OAAL,CAAaL,GAAb,EAAkBb,CAAlB,EAAqB2B,EAArB,EAhC2C,CAkC3C;;MACA3B,CAAC,GAAGoB,OAAO,CAACO,EAAR,GAAa3B,CAAb,GAAiB2B,EAAE,CAACvC,MAAH,CAAUY,CAAV,CAArB;MACA,OAAQoB,OAAO,IAAIA,OAAO,CAACU,OAApB,GAA+B9B,CAA/B,GAAmCjC,IAAI,CAACgE,aAAL,CAAmB/B,CAAnB,CAA1C;IACH,CAhDa;IAkDdgC,aAAa,EAAG,UAAS5B,OAAT,EAAkBC,MAAlB,EAA0B;MACtC,KAAKW,MAAL,CAAYb,WAAZ,CAAwBC,OAAxB,EAAiCC,MAAjC;;MACA,KAAM,IAAItB,CAAC,GAAG,CAAd,EAAiBA,CAAC,IAAI,EAAtB,EAA0BA,CAAC,EAA3B,EAA+B;QAC3B,KAAKiC,MAAL,CAAYT,KAAZ,CAAkB,KAAKQ,YAAL,CAAkBvB,MAAlB,CAAyBT,CAAzB,CAAlB;MACH;;MACD,KAAKiC,MAAL,CAAYL,SAAZ,CAAsBP,OAAtB,EAA+BC,MAA/B;IACH,CAxDa;IA0Dd4B,OAAO,EAAG,UAASC,UAAT,EAAqBf,QAArB,EAA+BC,OAA/B,EAAwC;MAC9CA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAD8C,CAG9C;;MACA,IAAIC,IAAI,GAAGD,OAAO,CAACC,IAAR,IAAgB,IAAI1D,CAAC,CAAC0D,IAAF,CAAOC,GAAX,EAA3B,CAJ8C,CAM9C;;MACA,IAAID,IAAI,CAACE,UAAT,EACIF,IAAI,CAACE,UAAL,CAAgBH,OAAhB;MAEJ,IAEA;MACAe,CAAC,GAAID,UAAU,CAACV,WAAX,IAA0BC,MAA1B,GAAmC1D,IAAI,CACnCqE,aAD+B,CACjBF,UADiB,CAAnC,GACgCA,UAJrC;MAAA,IAMA;MACAP,EAAE,GAAGP,OAAO,CAACO,EAAR,IAAcQ,CAAC,CAACE,MAAF,CAAS,CAAT,EAAY,CAAZ,CAPnB;MAAA,IASA;MACAhD,CAAC,GAAI8B,QAAQ,CAACK,WAAT,IAAwBC,MAAxB,GACL;MACA9D,CAAC,CAACkE,MAAF,CAASV,QAAT,EAAmBQ,EAAnB,EAAuB,EAAvB,EAA2B;QACvBG,OAAO,EAAG;MADa,CAA3B,CAFK,GAKL;MACAX,QAhBA,CAV8C,CA4B9C;;MACA,KAAKJ,YAAL,GAAoB,IAAI7C,WAAJ,CAAgBmB,CAAhB,CAApB;MAEAgC,IAAI,CAACY,OAAL,CAAapB,GAAb,EAAkBsB,CAAlB,EAAqBR,EAArB,EA/B8C,CAiC9C;;MACA,OAAQP,OAAO,IAAIA,OAAO,CAACU,OAApB,GAA+BK,CAA/B,GAAmClE,IAAI,CAACqE,aAAL,CAAmBH,CAAnB,CAA1C;IACH,CA7Fa;IA+FdI,aAAa,EAAG,UAASnC,OAAT,EAAkBC,MAAlB,EAA0B;MACtC,KAAKW,MAAL,CAAYb,WAAZ,CAAwBC,OAAxB,EAAiCC,MAAjC;;MACA,KAAM,IAAItB,CAAC,GAAG,EAAd,EAAkBA,CAAC,IAAI,CAAvB,EAA0BA,CAAC,EAA3B,EAA+B;QAC3B,KAAKiC,MAAL,CAAYT,KAAZ,CAAkB,KAAKQ,YAAL,CAAkBvB,MAAlB,CAAyBT,CAAzB,CAAlB;MACH;;MACD,KAAKiC,MAAL,CAAYL,SAAZ,CAAsBP,OAAtB,EAA+BC,MAA/B;IACH;EArGa,CAAlB;AAwGH,CAr+BD"},"metadata":{},"sourceType":"script"}